{"version":3,"sources":["../../../node_modules/.pnpm/@rgba-image+copy@0.1.3/node_modules/@rgba-image/copy/src/index.ts","../../../node_modules/.pnpm/@rgba-image+create-image@0.1.1/node_modules/@rgba-image/create-image/src/index.ts","../../../node_modules/.pnpm/@rgba-image+lanczos@0.1.1/node_modules/@rgba-image/lanczos/src/filters.ts","../../../node_modules/.pnpm/@rgba-image+lanczos@0.1.1/node_modules/@rgba-image/lanczos/src/convolve.ts","../../../node_modules/.pnpm/@rgba-image+lanczos@0.1.1/node_modules/@rgba-image/lanczos/src/index.ts","../src/dotlottie.ts","../src/common/dotlottie-state-machine-common.ts","../src/common/dotlottie-state.ts","../src/common/manifest.ts","../src/common/utils.ts","../src/common/dotlottie-theme-common.ts","../src/common/dotlottie-common.ts","../src/common/lottie-animation-common.ts","../src/common/lottie-image-common.ts","../src/common/dotlottie-plugin.ts","../src/lottie-image.ts","../src/common/duplicate-image-detector-common.ts","../src/common/lottie-audio-common.ts","../../../node_modules/.pnpm/browser-image-hash@0.0.5/node_modules/browser-image-hash/dist/HashableImageSourceConverter/DifferenceHash/VanilaConverter.js","../../../node_modules/.pnpm/browser-image-hash@0.0.5/node_modules/browser-image-hash/dist/HashSource.js","../../../node_modules/.pnpm/browser-image-hash@0.0.5/node_modules/browser-image-hash/dist/HashableImageSourceConverter/Resizer/LanczosResizer.js","../../../node_modules/.pnpm/browser-image-hash@0.0.5/node_modules/browser-image-hash/dist/Hash.js","../../../node_modules/.pnpm/browser-image-hash@0.0.5/node_modules/browser-image-hash/dist/HashGenerator.js","../../../node_modules/.pnpm/browser-image-hash@0.0.5/node_modules/browser-image-hash/dist/HashableImageSourceConverter/GlayScaleCalculator/ITU_R601_2Method.js","../../../node_modules/.pnpm/browser-image-hash@0.0.5/node_modules/browser-image-hash/dist/DifferenceHashBuilder.js","../src/duplicate-image-detector.ts","../src/node/lottie-audio.ts","../src/lottie-animation.ts"],"names":[],"mappings":"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","sourcesContent":[null,null,null,null,null,"/**\n * Copyright 2023 Design Barn Inc.\n */\n\nimport type { Animation as AnimationType } from '@lottiefiles/lottie-types';\nimport type { Zippable } from 'fflate';\nimport { strToU8, zip, strFromU8, unzip } from 'fflate';\n\nimport type {\n  DotLottiePlugin,\n  AnimationOptions,\n  DotLottieOptions,\n  ManifestAnimation,\n  Manifest,\n  ConversionOptions,\n} from './common';\nimport {\n  DotLottieCommon,\n  createError,\n  base64ToUint8Array,\n  getExtensionTypeFromBase64,\n  DotLottieError,\n  isAudioAsset,\n} from './common';\nimport { DuplicateImageDetector } from './duplicate-image-detector';\nimport { LottieAnimation } from './lottie-animation';\nimport { LottieImage } from './lottie-image';\nimport { LottieAudio } from './node/lottie-audio';\n\nexport class DotLottie extends DotLottieCommon {\n  public constructor(options?: DotLottieOptions) {\n    super(options);\n\n    if (this.enableDuplicateImageOptimization) this.addPlugins(new DuplicateImageDetector());\n  }\n\n  public override addPlugins(...plugins: DotLottiePlugin[]): DotLottieCommon {\n    plugins.forEach((plugin) => {\n      plugin.install(this);\n\n      this._plugins.push(plugin);\n    });\n\n    return this;\n  }\n\n  public override addAnimation(animationOptions: AnimationOptions): DotLottie {\n    const animation = new LottieAnimation(animationOptions);\n\n    if (this._animationsMap.get(animationOptions.id)) {\n      throw createError('Duplicate animation id detected, aborting.');\n    }\n\n    this._animationsMap.set(animation.id, animation);\n\n    return this;\n  }\n\n  public override async toBase64(options: ConversionOptions | undefined): Promise<string> {\n    const data = await this.toArrayBuffer(options);\n\n    const uint8Array = new Uint8Array(data);\n    const binaryString = uint8Array.reduce((acc, val) => acc + String.fromCharCode(val), '');\n\n    return window.btoa(binaryString);\n  }\n\n  public override async download(fileName: string, options: ConversionOptions | undefined = undefined): Promise<void> {\n    const blob = await this.toBlob(options);\n\n    const dataURL = URL.createObjectURL(blob);\n\n    const link = document.createElement('a');\n\n    link.href = dataURL;\n\n    link.download = fileName;\n\n    link.style.display = 'none';\n\n    document.body.append(link);\n\n    link.click();\n\n    setTimeout(() => {\n      URL.revokeObjectURL(dataURL);\n      link.remove();\n    }, 1000);\n  }\n\n  public override create(options?: DotLottieOptions): DotLottieCommon {\n    return new DotLottie(options);\n  }\n\n  public override async toArrayBuffer(options: ConversionOptions | undefined): Promise<ArrayBuffer> {\n    const manifest = this._buildManifest();\n\n    const dotlottie: Zippable = {\n      'manifest.json': [\n        strToU8(JSON.stringify(manifest)),\n        {\n          // no compression for manifest\n          level: 0,\n        },\n      ],\n    };\n\n    for (const animation of this.animations) {\n      const json = await animation.toJSON();\n\n      dotlottie[`animations/${animation.id}.json`] = [strToU8(JSON.stringify(json)), animation.zipOptions];\n\n      const imageAssets = animation.imageAssets;\n      const audioAssets = animation.audioAssets;\n\n      for (const asset of imageAssets) {\n        // Assure we have a base64 encoded version of the image\n        const dataAsString = await asset.toDataURL();\n\n        dotlottie[`images/${asset.fileName}`] = [base64ToUint8Array(dataAsString), asset.zipOptions];\n      }\n\n      for (const asset of audioAssets) {\n        // Assure we have a base64 encoded version of the audio\n        const dataAsString = await asset.toDataURL();\n\n        dotlottie[`audio/${asset.fileName}`] = [base64ToUint8Array(dataAsString), asset.zipOptions];\n      }\n    }\n\n    for (const theme of this.themes) {\n      const lss = await theme.toString();\n\n      dotlottie[`themes/${theme.id}.lss`] = [strToU8(lss), theme.zipOptions];\n    }\n\n    for (const state of this.stateMachines) {\n      const stateData = state.toString();\n\n      dotlottie[`states/${state.id}.json`] = [strToU8(stateData), state.zipOptions];\n    }\n\n    const dotlottieArrayBuffer = await new Promise<ArrayBuffer>((resolve, reject) => {\n      zip(dotlottie, options?.zipOptions || {}, (err, data) => {\n        if (err) {\n          reject(err);\n\n          return;\n        }\n\n        resolve(data.buffer);\n      });\n    });\n\n    return dotlottieArrayBuffer;\n  }\n\n  /**\n   * Creates a DotLottie instance from an array buffer\n   * @param arrayBuffer - array buffer of the dotlottie file\n   * @returns DotLottie instance\n   * @throws Error\n   */\n  public override async fromArrayBuffer(arrayBuffer: ArrayBuffer): Promise<DotLottie> {\n    const dotlottie = new DotLottie();\n\n    try {\n      const contentObj = await new Promise<Zippable>((resolve, reject) => {\n        unzip(new Uint8Array(arrayBuffer), (err, data) => {\n          if (err) {\n            reject(err);\n          }\n\n          resolve(data);\n        });\n      });\n\n      const tmpImages = [];\n      const tmpAudio = [];\n\n      if (contentObj['manifest.json'] instanceof Uint8Array) {\n        // valid buffer\n        try {\n          // Parse the manifest first so that we can pick up animation settings\n          const manifest = JSON.parse(strFromU8(contentObj['manifest.json'], false)) as Manifest;\n          const { author, custom, description, generator, keywords, version } = manifest;\n\n          if (author) {\n            this._requireValidAuthor(author);\n            dotlottie.setAuthor(author);\n          }\n          if (custom) {\n            this._requireValidCustomData(custom);\n            dotlottie.setCustomData(custom);\n          }\n          if (description) {\n            this._requireValidDescription(description);\n            dotlottie.setDescription(description);\n          }\n          if (generator) {\n            this._requireValidGenerator(generator);\n            dotlottie.setGenerator(generator);\n          }\n          if (keywords) {\n            this._requireValidKeywords(keywords);\n            dotlottie.setKeywords(keywords);\n          }\n          if (version) {\n            this._requireValidVersion(version);\n            dotlottie.setVersion(version);\n          }\n\n          for (const key of Object.keys(contentObj)) {\n            // true is passed to use binary string, otherwise btoa fails\n            const decodedStr = strFromU8(contentObj[key] as Uint8Array, true);\n\n            if (key.startsWith('animations/') && key.endsWith('.json')) {\n              // extract animationId from key as the key = `animations/${animationId}.json`\n              const animationId = /animations\\/(.+)\\.json/u.exec(key)?.[1];\n\n              if (!animationId) {\n                throw createError('Invalid animation id');\n              }\n\n              const animation = JSON.parse(decodedStr);\n\n              const animationSettings = manifest['animations'].find(\n                (anim: ManifestAnimation) => anim.id === animationId,\n              );\n\n              if (animationSettings === undefined) {\n                throw createError('Animation not found inside manifest');\n              }\n\n              dotlottie.addAnimation({\n                data: animation,\n                ...animationSettings,\n              });\n            } else if (key.startsWith('images/')) {\n              // extract imageId from key as the key = `images/${imageId}.${ext}`\n              const imageId = /images\\/(.+)\\./u.exec(key)?.[1];\n\n              if (!imageId) {\n                throw createError('Invalid image id');\n              }\n\n              let decodedImg = btoa(decodedStr);\n\n              const ext = getExtensionTypeFromBase64(decodedImg);\n\n              // Push the images in to a temporary array\n              decodedImg = `data:image/${ext};base64,${decodedImg}`;\n              tmpImages.push(\n                new LottieImage({\n                  id: imageId,\n                  data: decodedImg,\n                  fileName: key.split('/')[1] || '',\n                }),\n              );\n            } else if (key.startsWith('audio/')) {\n              // extract audioId from key as the key = `audio/${audioId}.${ext}`\n              const audioId = /audio\\/(.+)\\./u.exec(key)?.[1];\n\n              if (!audioId) {\n                throw new DotLottieError('Invalid image id');\n              }\n\n              let decodedAudio = btoa(decodedStr);\n\n              const ext = getExtensionTypeFromBase64(decodedAudio);\n\n              // Push the audio in to a temporary array\n              decodedAudio = `data:audio/${ext};base64,${decodedAudio}`;\n              tmpAudio.push(\n                new LottieAudio({\n                  id: audioId,\n                  data: decodedAudio,\n                  fileName: key.split('/')[1] || '',\n                }),\n              );\n            } else if (key.startsWith('themes/') && key.endsWith('.lss')) {\n              // extract themeId from key as the key = `themes/${themeId}.lss`\n              const themeId = /themes\\/(.+)\\.lss/u.exec(key)?.[1];\n\n              if (!themeId) {\n                throw createError('Invalid theme id');\n              }\n\n              manifest.themes?.forEach((theme) => {\n                if (theme.id === themeId) {\n                  dotlottie.addTheme({\n                    id: theme.id,\n                    data: decodedStr,\n                  });\n\n                  theme.animations.forEach((animationId) => {\n                    dotlottie.assignTheme({\n                      animationId,\n                      themeId,\n                    });\n                  });\n                }\n              });\n            } else if (key.startsWith('states/') && key.endsWith('.json')) {\n              // extract stateId from key as the key = `states/${stateId}.json`\n              const stateId = /states\\/(.+)\\.json/u.exec(key)?.[1];\n\n              if (!stateId) {\n                throw createError('Invalid theme id');\n              }\n\n              manifest.states?.forEach((state) => {\n                if (state === stateId) {\n                  const decodedStateMachine = JSON.parse(decodedStr);\n\n                  dotlottie.addStateMachine(decodedStateMachine);\n                }\n              });\n            }\n          }\n\n          // Go through the images and find to which animation they belong\n          for (const image of tmpImages) {\n            for (const parentAnimation of dotlottie.animations) {\n              if (parentAnimation.data) {\n                const animationAssets = parentAnimation.data.assets as AnimationType['assets'];\n\n                if (animationAssets) {\n                  for (const asset of animationAssets) {\n                    if ('w' in asset && 'h' in asset) {\n                      if (asset.p.includes(image.id)) {\n                        image.parentAnimations.push(parentAnimation);\n                        parentAnimation.imageAssets.push(image);\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n\n          // Go through the audio and find to which animation they belong\n          for (const audio of tmpAudio) {\n            for (const parentAnimation of dotlottie.animations) {\n              if (parentAnimation.data) {\n                const animationAssets = parentAnimation.data.assets as AnimationType['assets'];\n\n                if (animationAssets) {\n                  for (const asset of animationAssets) {\n                    if (isAudioAsset(asset)) {\n                      if (asset.p.includes(audio.id)) {\n                        audio.parentAnimations.push(parentAnimation);\n                        parentAnimation.audioAssets.push(audio);\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        } catch (err) {\n          // throw error as it's invalid json\n          throw createError('Invalid manifest inside buffer!');\n        }\n      } else {\n        // throw error as it's invalid buffer\n        throw createError('Invalid buffer');\n      }\n    } catch (err) {\n      if (err instanceof Error) {\n        throw createError(err.message);\n      }\n    }\n\n    return dotlottie;\n  }\n}\n","/**\n * Copyright 2023 Design Barn Inc.\n */\n\nimport type { ZipOptions } from 'fflate';\nimport { safeParse, flatten } from 'valibot';\n\nimport {\n  DotLottieStatesSchema,\n  type DotLottieStates,\n  type DotLottieStateMachineDescriptor,\n  DotLottieStateMachineDescriptorSchema,\n} from './dotlottie-state';\nimport { DotLottieError, ErrorCodes, createError } from './utils';\n\nexport interface DotLottieStateMachineCommonOptions {\n  descriptor: DotLottieStateMachineDescriptor;\n  states: DotLottieStates;\n  zipOptions?: ZipOptions;\n}\n\nexport class DotLottieStateMachineCommon {\n  protected _descriptor: DotLottieStateMachineDescriptor;\n\n  protected _zipOptions: ZipOptions;\n\n  protected _states: DotLottieStates;\n\n  public constructor(options: DotLottieStateMachineCommonOptions) {\n    this._requireValidId(options.descriptor.id);\n    this._requireValidStates(options.states);\n    this._requireValidDescriptor(options.descriptor);\n\n    this._descriptor = options.descriptor;\n\n    this._zipOptions = options.zipOptions ?? {};\n\n    this._states = options.states;\n  }\n\n  public get zipOptions(): ZipOptions {\n    return this._zipOptions;\n  }\n\n  public set zipOptions(zipOptions: ZipOptions) {\n    this._zipOptions = zipOptions;\n  }\n\n  public get id(): string {\n    return this._descriptor.id;\n  }\n\n  public set id(id: string) {\n    this._requireValidId(id);\n\n    this._descriptor.id = id;\n  }\n\n  public get states(): DotLottieStates {\n    return this._states;\n  }\n\n  public set states(states: DotLottieStates) {\n    this._states = states;\n  }\n\n  public get initial(): string {\n    return this._descriptor.initial;\n  }\n\n  public set initial(initial: string) {\n    this._descriptor.initial = initial;\n  }\n\n  public get descriptor(): DotLottieStateMachineDescriptor {\n    return this._descriptor;\n  }\n\n  public set descriptor(descriptor: DotLottieStateMachineDescriptor) {\n    this._descriptor = descriptor;\n  }\n\n  public toString(): string {\n    return JSON.stringify({\n      descriptor: this._descriptor,\n      states: this._states,\n    });\n  }\n\n  protected _requireValidId(id: string | undefined): void {\n    if (!id) {\n      throw createError('Invalid id.');\n    }\n  }\n\n  protected _requireValidDescriptor(descriptor: DotLottieStateMachineDescriptor): void {\n    const result = safeParse(DotLottieStateMachineDescriptorSchema, descriptor);\n\n    if (!result.success) {\n      const error = `Invalid state machine declaration, ${JSON.stringify(flatten(result.error).nested, null, 2)}`;\n\n      throw new DotLottieError(`Invalid descriptor: ${error}`, ErrorCodes.INVALID_STATEMACHINE);\n    }\n  }\n\n  protected _requireValidStates(states: DotLottieStates): void {\n    const result = safeParse(DotLottieStatesSchema, states);\n\n    if (!result.success) {\n      const error = `Invalid state machine declaration, ${JSON.stringify(flatten(result.error).nested, null, 2)}`;\n\n      throw new DotLottieError(`Invalid states: ${error}`, ErrorCodes.INVALID_STATEMACHINE);\n    }\n  }\n}\n","/**\n * Copyright 2023 Design Barn Inc.\n */\n\nimport type { Output } from 'valibot';\nimport {\n  merge,\n  number,\n  object,\n  optional,\n  string,\n  union,\n  omit,\n  record,\n  tuple,\n  maxValue,\n  minValue,\n  array,\n} from 'valibot';\n\nimport { ManifestAnimationSchema } from './manifest';\n\nexport const PlaybackOptionsSchema = omit(ManifestAnimationSchema, ['id']);\n\nexport type PlaybackOptions = Output<typeof PlaybackOptionsSchema>;\n\nexport const TransitionableSchema = object({\n  state: string(),\n});\nexport type Transitionable = Output<typeof TransitionableSchema>;\n\nexport const StateTransitionOnClickSchema = TransitionableSchema;\n\nexport type StateTransitionOnClick = Output<typeof StateTransitionOnClickSchema>;\n\nexport const StateTransitionOnAfterSchema = merge([TransitionableSchema, object({ ms: number() })]);\n\nexport type StateTransitionOnAfter = Output<typeof StateTransitionOnAfterSchema>;\n\nexport const StateTransitionOnEnterSchema = merge([TransitionableSchema, object({ count: number() })]);\n\nexport type StateTransitionOnEnter = Output<typeof StateTransitionOnEnterSchema>;\n\nexport const StateTransitionOnMouseEnterSchema = TransitionableSchema;\n\nexport type StateTransitionOnMouseEnter = Output<typeof StateTransitionOnMouseEnterSchema>;\n\nexport const StateTransitionOnMouseLeaveSchema = TransitionableSchema;\n\nexport type StateTransitionOnMouseLeave = Output<typeof StateTransitionOnMouseLeaveSchema>;\n\nexport const StateTransitionOnCompleteSchema = TransitionableSchema;\n\nexport type StateTransitionOnComplete = Output<typeof StateTransitionOnCompleteSchema>;\n\nexport const StateTransitionOnShowSchema = merge([\n  TransitionableSchema,\n  object({ threshold: optional(array(number([minValue(0), maxValue(1)]))) }),\n]);\nexport type StateTransitionOnShow = Output<typeof StateTransitionOnShowSchema>;\n\nexport const DotLottieStateTransitionEventsSchema = object({\n  onAfter: optional(StateTransitionOnAfterSchema),\n  onClick: optional(StateTransitionOnClickSchema),\n  onComplete: optional(StateTransitionOnCompleteSchema),\n  onEnter: optional(StateTransitionOnEnterSchema),\n  onMouseEnter: optional(StateTransitionOnMouseEnterSchema),\n  onMouseLeave: optional(StateTransitionOnMouseLeaveSchema),\n  onShow: optional(StateTransitionOnShowSchema),\n});\nexport type DotLottieStateTransitionEvents = Output<typeof DotLottieStateTransitionEventsSchema>;\n\nexport const DotLottieStatePlaybackSettingsSchema = merge([\n  PlaybackOptionsSchema,\n  object({\n    playOnScroll: optional(tuple([number([minValue(0), maxValue(1)]), number([minValue(0), maxValue(1)])])),\n    segments: optional(union([tuple([number(), number()]), string()])),\n  }),\n]);\nexport type DotLottieStatePlaybackSettings = Output<typeof DotLottieStatePlaybackSettingsSchema>;\n\nexport const DotLottieStateSchema = merge([\n  DotLottieStateTransitionEventsSchema,\n  object({\n    animationId: optional(string()),\n    playbackSettings: DotLottieStatePlaybackSettingsSchema,\n  }),\n]);\nexport type DotLottieState = Output<typeof DotLottieStateSchema>;\n\nexport const DotLottieStatesSchema = record(string(), DotLottieStateSchema);\nexport type DotLottieStates = Output<typeof DotLottieStatesSchema>;\n\nexport const DotLottieStateMachineDescriptorSchema = object({\n  id: string(),\n  initial: string(),\n});\nexport type DotLottieStateMachineDescriptor = Output<typeof DotLottieStateMachineDescriptorSchema>;\n\nexport const DotLottieStateMachineSchema = object({\n  descriptor: DotLottieStateMachineDescriptorSchema,\n  states: DotLottieStatesSchema,\n});\nexport type DotLottieStateMachine = Output<typeof DotLottieStateMachineSchema>;\n","/**\n * Copyright 2023 Design Barn Inc.\n */\n\nimport {\n  object,\n  type Output,\n  string,\n  array,\n  boolean,\n  number,\n  union,\n  optional,\n  record,\n  any,\n  nativeEnum,\n  literal,\n} from 'valibot';\n\nexport enum PlayMode {\n  Bounce = 'bounce',\n  Normal = 'normal',\n}\n\nexport const PlayModeSchema = nativeEnum(PlayMode);\n\nexport const ManifestAnimationSchema = object({\n  autoplay: optional(boolean()),\n  defaultTheme: optional(string()),\n  direction: optional(union([literal(1), literal(-1)])),\n  hover: optional(boolean()),\n  id: string(),\n  intermission: optional(number()),\n  loop: optional(union([boolean(), number()])),\n  playMode: optional(PlayModeSchema),\n  speed: optional(number()),\n  themeColor: optional(string()),\n});\nexport type ManifestAnimation = Output<typeof ManifestAnimationSchema>;\n\nexport const ManifestThemeSchema = object({\n  animations: array(string()),\n  id: string(),\n});\nexport type ManifestTheme = Output<typeof ManifestThemeSchema>;\n\nexport const ManifestSchema = object({\n  activeAnimationId: optional(string()),\n  animations: array(ManifestAnimationSchema),\n  author: optional(string()),\n  custom: optional(record(string(), any())),\n  description: optional(string()),\n  generator: optional(string()),\n  keywords: optional(string()),\n  revision: optional(number()),\n  themes: optional(array(ManifestThemeSchema)),\n  states: optional(array(string())),\n  version: optional(string()),\n});\n\nexport type Manifest = Output<typeof ManifestSchema>;\n","/**\n * Copyright 2023 Design Barn Inc.\n */\n\n/* eslint-disable guard-for-in */\n\nimport type { Animation as AnimationData, Asset } from '@lottiefiles/lottie-types';\nimport type { UnzipFileFilter, Unzipped } from 'fflate';\nimport { unzip as fflateUnzip, strFromU8 } from 'fflate';\nimport { flatten, safeParse } from 'valibot';\n\nimport type { LottieStateMachine } from '../lottie-state-machine';\n\nimport type { Manifest } from './manifest';\nimport { ManifestSchema } from './manifest';\n\nexport interface MimeTypes {\n  [key: string]: string;\n}\n\nexport interface MimeCodes {\n  [key: string]: number[];\n}\n\nexport const MIME_TYPES: MimeTypes = {\n  jpeg: 'image/jpeg',\n  png: 'image/png',\n  gif: 'image/gif',\n  bmp: 'image/bmp',\n  svg: 'image/svg+xml',\n  webp: 'image/webp',\n  mpeg: 'audio/mpeg',\n  mp3: 'audio/mp3',\n};\n\nexport const MIME_CODES: MimeCodes = {\n  jpeg: [0xff, 0xd8, 0xff],\n  png: [0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a],\n  gif: [0x47, 0x49, 0x46],\n  bmp: [0x42, 0x4d],\n  webp: [0x52, 0x49, 0x46, 0x46, 0x57, 0x45, 0x42, 0x50],\n  svg: [0x3c, 0x3f, 0x78],\n  mp3: [0x49, 0x44, 0x33, 0x3, 0x00, 0x00, 0x00, 0x00],\n  mpeg: [0x49, 0x44, 0x33, 0x3, 0x00, 0x00, 0x00, 0x00],\n};\n\nexport interface MimeToExtension {\n  [key: string]: string;\n}\n\nexport const MIME_TO_EXTENSION: MimeToExtension = {\n  'image/jpeg': 'jpeg',\n  'image/png': 'png',\n  'image/gif': 'gif',\n  'image/bmp': 'bmp',\n  'image/svg+xml': 'svg',\n  'image/webp': 'webp',\n  'audio/mpeg': 'mpeg',\n  'audio/mp3': 'mp3',\n};\n\n/**\n * Converts a base64 string into a Uint8Array.\n *\n * @remarks\n * This function accepts a base64 string and returns a Uint8Array containing the decoded bytes.\n *\n * @param base64String - The base64-encoded string to decode.\n * @returns A Uint8Array containing the decoded bytes.\n *\n * @example\n * ```typescript\n * const base64 = 'SGVsbG8gd29ybGQ=';\n * const array = base64ToUint8Array(base64);\n * ```\n *\n * @public\n */\nexport const base64ToUint8Array = (base64String: string): Uint8Array => {\n  const withoutMeta = base64String.substring(base64String.indexOf(',') + 1);\n  const binaryString =\n    typeof window === 'undefined' ? Buffer.from(withoutMeta, 'base64').toString('binary') : atob(withoutMeta);\n\n  const uint8Array = new Uint8Array(binaryString.length);\n\n  for (let i = 0; i < binaryString.length; i += 1) {\n    uint8Array[i] = binaryString.charCodeAt(i);\n  }\n\n  return uint8Array;\n};\n\n/**\n * Determines the MIME type from a base64-encoded string.\n *\n * @remarks\n * This function accepts a base64-encoded string and determines its MIME type by looking at the first few bytes.\n *\n * @param base64 - The base64-encoded string to analyze.\n * @returns The MIME type as a string, or null if the type cannot be determined.\n *\n * @example\n * ```typescript\n * const base64 = 'data:image/jpeg;base64,...';\n * const mimeType = getMimeTypeFromBase64(base64);\n * ```\n *\n * @public\n */\nexport const getMimeTypeFromBase64 = (base64: string): string | null | undefined => {\n  let data: string | null = null;\n  let bytes: number[] = [];\n\n  if (!base64) return null;\n\n  const withoutMeta = base64.substring(base64.indexOf(',') + 1);\n\n  if (typeof window === 'undefined') {\n    data = Buffer.from(withoutMeta, 'base64').toString('binary');\n  } else {\n    data = atob(withoutMeta);\n  }\n\n  const bufData = new Uint8Array(data.length);\n\n  for (let i = 0; i < data.length; i += 1) {\n    bufData[i] = data.charCodeAt(i);\n  }\n\n  bytes = Array.from(bufData.subarray(0, 8));\n  for (const mimeType in MIME_CODES) {\n    const dataArr = MIME_CODES[mimeType];\n\n    if (dataArr && bytes.every((byte, index) => byte === dataArr[index])) {\n      return MIME_TYPES[mimeType];\n    }\n  }\n\n  return null;\n};\n\n/**\n * Determines the file extension from a base64-encoded string.\n *\n * @remarks\n * This function accepts a base64-encoded string and determines its file extension by examining the MIME type.\n *\n * @param base64 - The base64-encoded string to analyze.\n * @returns The file extension as a string, or 'png' if the extension cannot be determined.\n *\n * @example\n * ```typescript\n * const base64 = 'data:image/jpeg;base64,...';\n * const extension = getExtensionTypeFromBase64(base64);\n * ```\n *\n * @public\n */\nexport const getExtensionTypeFromBase64 = (base64: string): string | null => {\n  const mimeType = getMimeTypeFromBase64(base64);\n\n  if (!mimeType) {\n    const ext = base64.split(';')[0]?.split('/')[1];\n\n    if (ext) {\n      return MIME_TO_EXTENSION[ext] || 'png';\n    }\n\n    return 'png';\n  }\n\n  return MIME_TO_EXTENSION[mimeType] || 'png';\n};\n\nexport enum ErrorCodes {\n  ASSET_NOT_FOUND = 'ASSET_NOT_FOUND',\n  INVALID_DOTLOTTIE = 'INVALID_DOTLOTTIE',\n  INVALID_STATEMACHINE = 'INVALID_STATEMACHINE',\n  INVALID_URL = 'INVALID_URL',\n}\n\nexport class DotLottieError extends Error {\n  public code: ErrorCodes | undefined;\n\n  public constructor(message: string, code?: ErrorCodes) {\n    super(message);\n    this.name = '[dotlottie-js]';\n    this.code = code;\n  }\n}\n\n/**\n * Creates an Error object with the specified message.\n *\n * @remarks\n * This function accepts a message string and constructs a new Error object prefixed with \"[dotlottie-js]: \".\n *\n * @deprecated\n * This function has been deprecated in favor of using the {@link DotLottieError} class directly.\n *\n * @param message - The error message to include in the Error object.\n * @returns An Error object with the specified message, prefixed with \"[dotlottie-js]: \".\n *\n * @example\n * ```typescript\n * const message = 'DotLottie not found';\n * const error = createError(message);\n * ```\n *\n * @public\n */\nexport const createError = (message: string): Error => {\n  const error = new Error(`[dotlottie-js]: ${message}`);\n\n  return error;\n};\n\n/**\n * Validates a given URL string.\n *\n * @remarks\n * This function accepts a URL string and checks whether it's a valid URL according to the URL constructor.\n * It returns `true` if the URL is valid, `false` otherwise.\n *\n * @param url - The URL string to validate.\n * @returns `true` if the URL is valid, `false` otherwise.\n *\n * @example\n * ```typescript\n * const url = 'https://example.com';\n * const isValid = isValidURL(url); // true\n * ```\n *\n * @public\n */\nexport const isValidURL = (url: string): boolean => {\n  try {\n    // eslint-disable-next-line no-new\n    new URL(url);\n\n    return true;\n  } catch {\n    return false;\n  }\n};\n\n/**\n * Creates a data URL from a Uint8Array.\n *\n * @remarks\n * This function accepts a Uint8Array and a file extension, then converts the Uint8Array into a base64 data URL string.\n * The mimeType is determined based on the provided file extension, or defaults to 'image/png' if the extension is not recognized.\n *\n * @param uint8Data - The Uint8Array containing the binary data.\n * @param fileExtension - The file extension used to determine the mimeType (e.g., 'png', 'jpeg').\n * @returns The data URL string.\n *\n * @example\n * ```typescript\n * const uint8Data = new Uint8Array(...);\n * const fileExtension = 'png';\n * const dataUrl = dataUrlFromU8(uint8Data, fileExtension);\n * ```\n */\nexport function dataUrlFromU8(uint8Data: Uint8Array): string {\n  let base64: string;\n\n  if (typeof window === 'undefined') {\n    // Using Node.js Buffer for non-browser environments\n    base64 = Buffer.from(uint8Data).toString('base64');\n  } else {\n    // Using window.btoa for browser environments\n    const binaryString = Array.prototype.map.call(uint8Data, (byte: number) => String.fromCharCode(byte)).join('');\n\n    base64 = window.btoa(binaryString);\n  }\n\n  const mimeType = getMimeTypeFromBase64(base64);\n\n  return `data:${mimeType};base64,${base64}`;\n}\n\n/**\n * Checks if an asset is an image asset.\n *\n * @remarks\n * This function accepts an asset object and determines whether it represents an image asset.\n * It returns `true` if it's an image asset, `false` otherwise.\n *\n * @param asset - The asset object to check.\n * @returns `true` if it's an image asset, `false` otherwise.\n *\n * @example\n * ```typescript\n * const asset = { w: 100, h: 100, p: 'image.png' };\n * const isImage = isImageAsset(asset); // true\n * ```\n *\n * @public\n */\nexport function isImageAsset(asset: Asset.Value): asset is Asset.Image {\n  return 'w' in asset && 'h' in asset && !('xt' in asset) && 'p' in asset;\n}\n\n/**\n * Checks if an asset is an audio asset.\n *\n * @remarks\n * This function accepts an asset object and determines whether it represents an audio asset.\n * It returns `true` if it's an audio asset, `false` otherwise.\n *\n * @param asset - The asset object to check.\n * @returns `true` if it's an audio asset, `false` otherwise.\n *\n * @example\n * ```typescript\n * const asset = { e: 0, u: 'music/', p: 'audio.mp3' };\n * const isAudio = isAudioAsset(asset); // true\n * ```\n *\n * @public\n */\nexport function isAudioAsset(asset: Asset.Value): asset is Asset.Image {\n  return !('h' in asset) && !('w' in asset) && 'p' in asset && 'e' in asset && 'u' in asset && 'id' in asset;\n}\n\n/**\n * Unzips the .lottie file.\n *\n * @remarks\n * This function accepts a .lottie file as a Uint8Array and an optional filter function to refine the unzipping process.\n * It returns a Promise that resolves with the unzipped data.\n *\n * @param dotLottie - The .lottie data as a Uint8Array.\n * @param filter - The filter function to apply to the files. Defaults to a function that always returns true.\n * @returns A Promise that resolves with the unzipped data.\n * @throws {@link DotLottieError} if the .lottie data is not provided or is invalid.\n *\n * @example\n * ```typescript\n * const dotLottie = new Uint8Array(...);\n * const unzippedData = await unzipDotLottie(dotLottie);\n * ```\n *\n * @public\n */\nexport async function unzipDotLottie(\n  dotLottie: Uint8Array | undefined,\n  filter: UnzipFileFilter = (): boolean => true,\n): Promise<Unzipped> {\n  if (!(dotLottie instanceof Uint8Array)) {\n    throw new DotLottieError('DotLottie not found', ErrorCodes.INVALID_DOTLOTTIE);\n  }\n\n  const unzipped = await new Promise<Unzipped>((resolve, reject) => {\n    fflateUnzip(dotLottie, { filter }, (err, data) => {\n      if (err) {\n        reject(err);\n      }\n      resolve(data);\n    });\n  });\n\n  return unzipped;\n}\n\n/**\n * Unzips a specific file from a `.lottie` archive.\n *\n * @remarks\n * This function accepts a `.lottie` file as a `Uint8Array`, a path string representing the\n * target file to extract, and an optional filter function to further refine the extraction.\n * It returns a `Promise` that resolves to the unzipped `Uint8Array` of the target file.\n *\n * @param dotLottie - The `.lottie` file content as a `Uint8Array`.\n * @param path - The path of the target file within the `.lottie` archive to extract.\n * @param filter - An optional filter function to apply on the unzipping process.\n *                 Accepts a file object and returns a boolean indicating whether the file should be included.\n * @returns A `Promise` that resolves to the `Uint8Array` of the unzipped target file.\n *\n * @throws {@link DotLottieError} if the input is not a valid `.lottie` file or if the target file is not found.\n *\n * @example\n * ```typescript\n * const dotLottie = new Uint8Array(...);\n * const targetPath = 'images/image.png';\n * const unzippedFile = await unzipDotLottieFile(dotLottie, targetPath);\n * ```\n *\n * @public\n */\nexport async function unzipDotLottieFile(\n  dotLottie: Uint8Array,\n  path: string,\n  filter?: UnzipFileFilter,\n): Promise<Uint8Array | undefined> {\n  if (!(dotLottie instanceof Uint8Array)) {\n    throw new DotLottieError('DotLottie not found', ErrorCodes.INVALID_DOTLOTTIE);\n  }\n\n  const unzipped = await unzipDotLottie(dotLottie, (file) => file.name === path && (!filter || filter(file)));\n\n  return unzipped[path];\n}\n\n/**\n * Retrieves the manifest data from the given DotLottie object.\n *\n * @remarks\n * This function accepts a DotLottie object as a Uint8Array and extracts the manifest data from it.\n * The manifest contains metadata information about the .lottie file, such as the list of animations, themes, and image assets.\n * It returns a Promise that resolves to the manifest data or `undefined` if the manifest is not found.\n *\n * @param dotLottie - The Uint8Array of DotLottie data.\n * @returns A Promise that resolves with the manifest data or `undefined` if not found.\n *\n * @example\n * ```typescript\n * const dotLottie = new Uint8Array(...);\n * const manifestData = await getManifest(dotLottie);\n * ```\n *\n * @public\n */\nexport async function getManifest(dotLottie: Uint8Array): Promise<Manifest | undefined> {\n  const manifestFileName = 'manifest.json';\n\n  const unzipped = await unzipDotLottie(dotLottie, (file) => file.name === manifestFileName);\n\n  const unzippedManifest = unzipped[manifestFileName];\n\n  if (typeof unzippedManifest === 'undefined') {\n    return undefined;\n  }\n\n  return JSON.parse(strFromU8(unzippedManifest, false)) as Manifest;\n}\n\n/**\n * Validates the provided DotLottie data.\n *\n * @remarks\n * This function accepts a Uint8Array containing .lottie data and validates its structure and content.\n * It returns a Promise that resolves with an object containing a success boolean and an optional error string.\n *\n * @param dotLottie - The DotLottie data as a Uint8Array.\n * @returns A Promise that resolves with an object containing a success boolean and an optional error string.\n *\n * @example\n * ```typescript\n * const dotLottie = new Uint8Array(...);\n * const validationResult = await validateDotLottie(dotLottie);\n * ```\n *\n * @public\n */\nexport async function validateDotLottie(dotLottie: Uint8Array): Promise<{ error?: string; success: boolean }> {\n  if (!(dotLottie instanceof Uint8Array)) {\n    return { success: false, error: 'DotLottie not found' };\n  }\n\n  const manifest = await getManifest(dotLottie);\n\n  if (typeof manifest === 'undefined') {\n    return { success: false, error: 'Invalid .lottie file, manifest.json is missing' };\n  }\n\n  const manifestValidationResult = safeParse(ManifestSchema, manifest);\n\n  if (!manifestValidationResult.success) {\n    const error = `Invalid .lottie file, manifest.json structure is invalid, ${JSON.stringify(\n      flatten(manifestValidationResult.error).nested,\n      null,\n      2,\n    )}`;\n\n    return { success: false, error };\n  }\n\n  return { success: true };\n}\n\n/**\n * Loads a .lottie file from an ArrayBuffer.\n *\n * @remarks\n * This function takes an ArrayBuffer containing .lottie data and converts it into a Uint8Array.\n * It validates the data and returns a Promise that resolves with the DotLottie data as a Uint8Array.\n *\n * @param arrayBuffer - The ArrayBuffer containing .lottie data.\n * @returns A Promise that resolves with the DotLottie data as a Uint8Array.\n * @throws {@link DotLottieError} if the data is invalid.\n *\n * @example\n * ```typescript\n * const arrayBuffer = new ArrayBuffer(...);\n * const dotLottie = await loadFromArrayBuffer(arrayBuffer);\n * ```\n *\n * @public\n */\nexport async function loadFromArrayBuffer(arrayBuffer: ArrayBuffer): Promise<Uint8Array> {\n  const dotLottie = new Uint8Array(arrayBuffer);\n\n  const validationResult = await validateDotLottie(dotLottie);\n\n  if (validationResult.error) {\n    throw new DotLottieError(validationResult.error, ErrorCodes.INVALID_DOTLOTTIE);\n  }\n\n  return dotLottie;\n}\n\n/**\n * Loads a .lottie file from a given URL.\n *\n * @remarks\n * This function takes a URL string as input and fetches the .lottie file from the provided URL.\n * It returns a Promise that resolves with the DotLottie data as a Uint8Array.\n *\n * @param src - The URL source of the .lottie file.\n * @returns A Promise that resolves with the DotLottie data as a Uint8Array.\n * @throws {@link DotLottieError} if the URL is invalid or if the content type is incorrect.\n *\n * @example\n * ```typescript\n * const url = 'https://example.com/animation.lottie';\n * const dotLottie = await loadFromURL(url);\n * ```\n *\n * @public\n */\nexport async function loadFromURL(src: string): Promise<Uint8Array> {\n  if (!isValidURL(src)) {\n    throw new DotLottieError('Invalid url provided for .lottie file', ErrorCodes.INVALID_URL);\n  }\n\n  const response = await fetch(src);\n\n  const arrayBuffer = await response.arrayBuffer();\n\n  const contentType = response.headers.get('content-type');\n\n  if (!contentType?.includes('application/zip')) {\n    throw new DotLottieError(\n      'Invalid content type provided for .lottie file, expected application/zip',\n      ErrorCodes.INVALID_DOTLOTTIE,\n    );\n  }\n\n  const dotLottie = await loadFromArrayBuffer(arrayBuffer);\n\n  return dotLottie;\n}\n\n/**\n * Retrieves an audio from the given DotLottie object by its filename.\n *\n * @remarks\n * This function accepts a DotLottie object as a Uint8Array, the filename of the audio to retrieve, and an optional filter function.\n * It returns a Promise that resolves to the audio data URL or `undefined` if not found.\n *\n * @param dotLottie - The Uint8Array of DotLottie data.\n * @param filename - The filename of the image to get.\n * @param filter - An optional filter function to apply on the unzipping process.\n * @returns A Promise that resolves with the audio data URL or `undefined` if not found.\n *\n * @example\n * ```typescript\n * const dotLottie = new Uint8Array(...);\n * const filename = 'alarm.mp3';\n * const imageData = await getAudio(dotLottie, filename);\n * ```\n *\n * @public\n */\nexport async function getAudio(\n  dotLottie: Uint8Array,\n  filename: string,\n  filter?: UnzipFileFilter,\n): Promise<string | undefined> {\n  const audioFilename = `audio/${filename}`;\n\n  const unzipped = await unzipDotLottieFile(dotLottie, audioFilename, filter);\n\n  if (typeof unzipped === 'undefined') {\n    return undefined;\n  }\n\n  return dataUrlFromU8(unzipped);\n}\n\n/**\n * Retrieves all audio files from the given DotLottie object.\n *\n * @remarks\n * This function accepts a DotLottie object as a Uint8Array and an optional filter function to further refine the extraction.\n * It returns a Promise that resolves to a record containing the audio data URLs mapped by their ID.\n *\n * @param dotLottie - The Uint8Array of DotLottie data.\n * @param filter - An optional filter function to apply on the unzipping process.\n * @returns A Promise that resolves to a record containing the audio data URLs mapped by their ID.\n *\n * @example\n * ```typescript\n * const dotLottie = new Uint8Array(...);\n * const allAudio = await getAllAudio(dotLottie);\n * ```\n *\n * @public\n */\nexport async function getAllAudio(dotLottie: Uint8Array, filter?: UnzipFileFilter): Promise<Record<string, string>> {\n  const unzippedAudio = await unzipDotLottie(dotLottie, (file) => {\n    const name = file.name.replace('audio/', '');\n\n    return file.name.startsWith('audio/') && (!filter || filter({ ...file, name }));\n  });\n\n  const audio: Record<string, string> = {};\n\n  for (const audioPath in unzippedAudio) {\n    const unzippedSingleAudio = unzippedAudio[audioPath];\n\n    if (unzippedSingleAudio instanceof Uint8Array) {\n      const audioId = audioPath.replace('audio/', '');\n\n      audio[audioId] = dataUrlFromU8(unzippedSingleAudio);\n    }\n  }\n\n  return audio;\n}\n\n/**\n * Inlines audio assets for the given animations within a DotLottie object.\n *\n * @remarks\n * This function accepts a DotLottie object as a Uint8Array and a record containing the animations to process.\n * It identifies the audio used in the animations and replaces their references with the actual audio data.\n * This operation is performed asynchronously, and the function returns a Promise that resolves when the operation is complete.\n *\n * @param dotLottie - The DotLottie object containing the animations.\n * @param animations - A record containing the animations to process.\n * @returns A Promise that resolves when the operation is complete, returning nothing.\n *\n * @example\n * ```typescript\n * const dotLottie = new Uint8Array(...);\n * const animations = { animation1: {...}, animation2: {...} };\n * await inlineAudioAssets(dotLottie, animations);\n * ```\n *\n * @public\n */\nexport async function inlineAudioAssets(\n  dotLottie: Uint8Array,\n  animations: Record<string, AnimationData>,\n): Promise<void> {\n  const audioMap = new Map<string, Set<string>>();\n\n  for (const [animationId, animationData] of Object.entries(animations)) {\n    for (const asset of animationData.assets || []) {\n      if (isAudioAsset(asset)) {\n        const audioId = asset.p;\n\n        if (!audioMap.has(audioId)) {\n          audioMap.set(audioId, new Set());\n        }\n        audioMap.get(audioId)?.add(animationId);\n      }\n    }\n  }\n\n  const unzippedAudio = await getAllAudio(dotLottie, (file) => audioMap.has(file.name));\n\n  for (const [audioId, animationIdsSet] of audioMap) {\n    const audioDataURL = unzippedAudio[audioId];\n\n    if (audioDataURL) {\n      for (const animationId of animationIdsSet) {\n        const animationData = animations[animationId];\n\n        for (const asset of animationData?.assets || []) {\n          if (isAudioAsset(asset) && asset.p === audioId) {\n            asset.p = audioDataURL;\n            asset.u = '';\n            asset.e = 1;\n          }\n        }\n      }\n    }\n  }\n}\n\n/**\n * Retrieves an image from the given DotLottie object by its filename.\n *\n * @remarks\n * This function accepts a DotLottie object as a Uint8Array, the filename of the image to retrieve, and an optional filter function.\n * It returns a Promise that resolves to the image data URL or `undefined` if not found.\n *\n * @param dotLottie - The Uint8Array of DotLottie data.\n * @param filename - The filename of the image to get.\n * @param filter - An optional filter function to apply on the unzipping process.\n * @returns A Promise that resolves with the image data URL or `undefined` if not found.\n *\n * @example\n * ```typescript\n * const dotLottie = new Uint8Array(...);\n * const filename = 'image.png';\n * const imageData = await getImage(dotLottie, filename);\n * ```\n *\n * @public\n */\nexport async function getImage(\n  dotLottie: Uint8Array,\n  filename: string,\n  filter?: UnzipFileFilter,\n): Promise<string | undefined> {\n  const imageFilename = `images/${filename}`;\n\n  const unzipped = await unzipDotLottieFile(dotLottie, imageFilename, filter);\n\n  if (typeof unzipped === 'undefined') {\n    return undefined;\n  }\n\n  return dataUrlFromU8(unzipped);\n}\n\n/**\n * Retrieves all images from the given DotLottie object.\n *\n * @remarks\n * This function accepts a DotLottie object as a Uint8Array and an optional filter function to further refine the extraction.\n * It returns a Promise that resolves to a record containing the image data URLs mapped by their ID.\n *\n * @param dotLottie - The Uint8Array of DotLottie data.\n * @param filter - An optional filter function to apply on the unzipping process.\n * @returns A Promise that resolves to a record containing the image data URLs mapped by their ID.\n *\n * @example\n * ```typescript\n * const dotLottie = new Uint8Array(...);\n * const images = await getImages(dotLottie);\n * ```\n *\n * @public\n */\nexport async function getImages(dotLottie: Uint8Array, filter?: UnzipFileFilter): Promise<Record<string, string>> {\n  const unzippedImages = await unzipDotLottie(dotLottie, (file) => {\n    const name = file.name.replace('images/', '');\n\n    return file.name.startsWith('images/') && (!filter || filter({ ...file, name }));\n  });\n\n  const images: Record<string, string> = {};\n\n  for (const imagePath in unzippedImages) {\n    const unzippedImage = unzippedImages[imagePath];\n\n    if (unzippedImage instanceof Uint8Array) {\n      const imageId = imagePath.replace('images/', '');\n\n      images[imageId] = dataUrlFromU8(unzippedImage);\n    }\n  }\n\n  return images;\n}\n\n/**\n * Inlines image assets for the given animations within a DotLottie object.\n *\n * @remarks\n * This function accepts a DotLottie object as a Uint8Array and a record containing the animations to process.\n * It identifies the images used in the animations and replaces their references with the actual image data.\n * This operation is performed asynchronously, and the function returns a Promise that resolves when the operation is complete.\n *\n * @param dotLottie - The DotLottie object containing the animations.\n * @param animations - A record containing the animations to process.\n * @returns A Promise that resolves when the operation is complete, returning nothing.\n *\n * @example\n * ```typescript\n * const dotLottie = new Uint8Array(...);\n * const animations = { animation1: {...}, animation2: {...} };\n * await inlineImageAssets(dotLottie, animations);\n * ```\n *\n * @public\n */\nexport async function inlineImageAssets(\n  dotLottie: Uint8Array,\n  animations: Record<string, AnimationData>,\n): Promise<void> {\n  const imagesMap = new Map<string, Set<string>>();\n\n  for (const [animationId, animationData] of Object.entries(animations)) {\n    for (const asset of animationData.assets || []) {\n      if (isImageAsset(asset)) {\n        const imageId = asset.p;\n\n        if (!imagesMap.has(imageId)) {\n          imagesMap.set(imageId, new Set());\n        }\n        imagesMap.get(imageId)?.add(animationId);\n      }\n    }\n  }\n\n  const unzippedImages = await getImages(dotLottie, (file) => imagesMap.has(file.name));\n\n  for (const [imageId, animationIdsSet] of imagesMap) {\n    const imageDataURL = unzippedImages[imageId];\n\n    if (imageDataURL) {\n      for (const animationId of animationIdsSet) {\n        const animationData = animations[animationId];\n\n        for (const asset of animationData?.assets || []) {\n          if (isImageAsset(asset) && asset.p === imageId) {\n            asset.p = imageDataURL;\n            asset.u = '';\n            asset.e = 1;\n          }\n        }\n      }\n    }\n  }\n}\n\n/**\n * Retrieves an animation from the given DotLottie object by its ID.\n *\n * @remarks\n * This function accepts a DotLottie object as a Uint8Array, the animation ID to retrieve, and an optional inlineAssets option.\n * It returns a Promise that resolves to the animation data or `undefined` if not found.\n *\n * @param dotLottie - The Uint8Array of DotLottie data.\n * @param animationId - The animation ID to get.\n * @param options - An object containing an optional `inlineAssets` boolean to control whether image assets should be inlined.\n * @param filter - An optional function to filter the files to be unzipped.\n * @returns A Promise that resolves with the animation data or `undefined` if not found.\n *\n * @example\n * ```typescript\n * const dotLottie = new Uint8Array(...);\n * const animationId = 'example';\n * const animationData = await getAnimation(dotLottie, animationId, { inlineAssets: true });\n * ```\n *\n * @public\n */\nexport async function getAnimation(\n  dotLottie: Uint8Array,\n  animationId: string,\n  { inlineAssets }: { inlineAssets?: boolean } = {},\n  filter?: UnzipFileFilter,\n): Promise<AnimationData | undefined> {\n  const animationFilename = `animations/${animationId}.json`;\n\n  const unzippedAnimation = await unzipDotLottieFile(dotLottie, animationFilename, filter);\n\n  if (typeof unzippedAnimation === 'undefined') {\n    return undefined;\n  }\n\n  const animationData = JSON.parse(strFromU8(unzippedAnimation, false)) as AnimationData;\n\n  if (!inlineAssets) {\n    return animationData;\n  }\n\n  const animationsMap = {\n    [animationId]: animationData,\n  };\n\n  await inlineImageAssets(dotLottie, animationsMap);\n\n  await inlineAudioAssets(dotLottie, animationsMap);\n\n  return animationData;\n}\n\n/**\n * Retrieves the animations from the given DotLottie object, with optional filtering and asset inlining.\n *\n * @remarks\n * This function accepts a DotLottie object as a Uint8Array, an optional inlineAssets option, and an optional filter function.\n * It returns a Promise that resolves to a record containing the animation data mapped by their ID.\n *\n * @param dotLottie - The Uint8Array of DotLottie data.\n * @param options - An object containing an optional `inlineAssets` boolean to control whether assets should be inlined.\n * @param filter - An optional function to filter the files to be unzipped.\n * @returns A Promise that resolves to a record containing the animation data mapped by their ID.\n *\n * @example\n * ```typescript\n * const dotLottie = new Uint8Array(...);\n * const animations = await getAnimations(dotLottie, { inlineAssets: true });\n * ```\n *\n * @public\n */\nexport async function getAnimations(\n  dotLottie: Uint8Array,\n  { inlineAssets }: { inlineAssets?: boolean } = {},\n  filter?: UnzipFileFilter,\n): Promise<Record<string, AnimationData>> {\n  const animationsMap: Record<string, AnimationData> = {};\n  const unzippedAnimations = await unzipDotLottie(dotLottie, (file) => {\n    const filename = file.name.replace('animations/', '').replace('.json', '');\n\n    return file.name.startsWith('animations/') && (!filter || filter({ ...file, name: filename }));\n  });\n\n  for (const animationPath in unzippedAnimations) {\n    const data = unzippedAnimations[animationPath];\n\n    if (data instanceof Uint8Array) {\n      const animationId = animationPath.replace('animations/', '').replace('.json', '');\n      const animationData = JSON.parse(strFromU8(data, false)) as AnimationData;\n\n      animationsMap[animationId] = animationData;\n    }\n  }\n\n  if (!inlineAssets) {\n    return animationsMap;\n  }\n\n  await inlineImageAssets(dotLottie, animationsMap);\n\n  return animationsMap;\n}\n\n/**\n * Retrieves the themes from the given DotLottie object.\n *\n * @remarks\n * This function accepts a DotLottie object as a Uint8Array and an optional filter function to refine the extraction of themes.\n * It returns a Promise that resolves to a record containing the themes mapped by their ID.\n *\n * @param dotLottie - The DotLottie object containing the themes.\n * @param filter - An optional function to filter the files to be unzipped.\n * @returns A Promise that resolves to a record containing the themes mapped by their ID.\n *\n * @example\n * ```typescript\n * const dotLottie = new Uint8Array(...);\n * const themes = await getThemes(dotLottie);\n * ```\n */\nexport async function getThemes(dotLottie: Uint8Array, filter?: UnzipFileFilter): Promise<Record<string, string>> {\n  const themesMap: Record<string, string> = {};\n\n  const unzippedThemes = await unzipDotLottie(dotLottie, (file) => {\n    const name = file.name.replace('themes/', '').replace('.lss', '');\n\n    return file.name.startsWith('themes/') && (!filter || filter({ ...file, name }));\n  });\n\n  for (const themePath in unzippedThemes) {\n    const data = unzippedThemes[themePath];\n\n    if (data instanceof Uint8Array) {\n      const themeId = themePath.replace('themes/', '').replace('.lss', '');\n\n      themesMap[themeId] = strFromU8(data, false);\n    }\n  }\n\n  return themesMap;\n}\n\n/**\n * Retrieves a specific theme by ID from the given DotLottie object.\n *\n * @remarks\n * This function accepts a DotLottie object as a Uint8Array, the theme ID to retrieve, and an optional filter function.\n * It returns a Promise that resolves to the theme as a string or `undefined` if not found.\n *\n * @param dotLottie - The DotLottie object containing the theme.\n * @param themeId - The ID of the theme to retrieve.\n * @param filter - An optional function to filter the files to be unzipped.\n * @returns A Promise that resolves to the theme as a string or `undefined` if not found.\n *\n * @example\n * ```typescript\n * const dotLottie = new Uint8Array(...);\n * const themeId = 'dark';\n * const theme = await getTheme(dotLottie, themeId);\n * ```\n */\nexport async function getTheme(\n  dotLottie: Uint8Array,\n  themeId: string,\n  filter?: UnzipFileFilter,\n): Promise<string | undefined> {\n  const themeFilename = `themes/${themeId}.lss`;\n\n  const unzippedTheme = await unzipDotLottieFile(dotLottie, themeFilename, filter);\n\n  if (typeof unzippedTheme === 'undefined') {\n    return undefined;\n  }\n\n  return strFromU8(unzippedTheme, false);\n}\n\n/**\n * Retrieves the state machines from the given DotLottie object.\n *\n * @remarks\n * This function accepts a DotLottie object as a Uint8Array and an optional filter function to refine the extraction of state machines.\n * It returns a Promise that resolves to a record containing the state machines mapped by their ID.\n *\n * @param dotLottie - The DotLottie object containing the state machines.\n * @param filter - An optional function to filter the files to be unzipped.\n * @returns A Promise that resolves to a record containing the state machines mapped by their ID.\n *\n * @example\n * ```typescript\n * const dotLottie = new Uint8Array(...);\n * const machines = await getStateMachines(dotLottie);\n * ```\n */\nexport async function getStateMachines(\n  dotLottie: Uint8Array,\n  filter?: UnzipFileFilter,\n): Promise<Record<string, string>> {\n  const statesMap: Record<string, string> = {};\n\n  const unzippedStates = await unzipDotLottie(dotLottie, (file) => {\n    const name = file.name.replace('states/', '').replace('.json', '');\n\n    return file.name.startsWith('states/') && (!filter || filter({ ...file, name }));\n  });\n\n  for (const statePath in unzippedStates) {\n    const data = unzippedStates[statePath];\n\n    if (data instanceof Uint8Array) {\n      const themeId = statePath.replace('states/', '').replace('.json', '');\n\n      statesMap[themeId] = strFromU8(data, false);\n    }\n  }\n\n  return statesMap;\n}\n\n/**\n * Retrieves a specific state machine by ID from the given DotLottie object.\n *\n * @remarks\n * This function accepts a DotLottie object as a Uint8Array, the state ID to retrieve, and an optional filter function.\n * It returns a Promise that resolves to the state machine as a string or `undefined` if not found.\n *\n * @param dotLottie - The DotLottie object containing the theme.\n * @param stateMachineId - The ID of the state machine to retrieve.\n * @param filter - An optional function to filter the files to be unzipped.\n * @returns A Promise that resolves to the state machine as a string or `undefined` if not found.\n *\n * @example\n * ```typescript\n * const dotLottie = new Uint8Array(...);\n * const stateMachineId = 'walk';\n * const stateMachine = await getState(dotLottie, stateMachineId);\n * ```\n */\nexport async function getStateMachine(\n  dotLottie: Uint8Array,\n  stateMachineId: string,\n  filter?: UnzipFileFilter,\n): Promise<LottieStateMachine | undefined> {\n  const stateMachineFilename = `states/${stateMachineId}.json`;\n\n  const unzippedStateMachine = await unzipDotLottieFile(dotLottie, stateMachineFilename, filter);\n\n  if (typeof unzippedStateMachine === 'undefined') {\n    return undefined;\n  }\n\n  const stateMachine = JSON.parse(strFromU8(unzippedStateMachine, false)) as LottieStateMachine;\n\n  return stateMachine;\n}\n","/**\n * Copyright 2023 Design Barn Inc.\n */\n\nimport type { ZipOptions } from 'fflate';\n\nimport type { LottieAnimationCommon } from './lottie-animation-common';\nimport { createError, isValidURL } from './utils';\n\nexport interface ThemeOptions {\n  data?: string;\n  id: string;\n  url?: string;\n  zipOptions?: ZipOptions;\n}\n\nexport class LottieThemeCommon {\n  protected _data?: string;\n\n  protected _id: string = '';\n\n  protected _url?: string;\n\n  protected readonly _animationsMap: Map<string, LottieAnimationCommon> = new Map();\n\n  protected _zipOptions: ZipOptions;\n\n  public constructor(options: ThemeOptions) {\n    this._requireValidId(options.id);\n    this._id = options.id;\n\n    if (options.data) {\n      this._requireValidData(options.data);\n      this._data = options.data;\n    }\n\n    if (options.url) {\n      this._requireValidUrl(options.url);\n      this._url = options.url;\n    }\n\n    this._zipOptions = options.zipOptions ?? {};\n  }\n\n  public get zipOptions(): ZipOptions {\n    return this._zipOptions;\n  }\n\n  public set zipOptions(zipOptions: ZipOptions) {\n    this._zipOptions = zipOptions;\n  }\n\n  public get id(): string {\n    return this._id;\n  }\n\n  public set id(id: string | undefined) {\n    this._requireValidId(id);\n\n    this._id = id;\n  }\n\n  public get url(): string | undefined {\n    return this._url;\n  }\n\n  public set url(url: string | undefined) {\n    this._requireValidUrl(url);\n\n    this._url = url;\n  }\n\n  public get data(): string | undefined {\n    return this._data;\n  }\n\n  public set data(data: string | undefined) {\n    this._requireValidData(data);\n\n    this._data = data;\n  }\n\n  public get animations(): LottieAnimationCommon[] {\n    return Array.from(this._animationsMap.values());\n  }\n\n  public async toString(): Promise<string> {\n    if (!this._data && this._url) {\n      await this._loadDataFromUrl(this._url);\n    }\n\n    this._requireValidData(this._data);\n\n    return this._data;\n  }\n\n  public addAnimation(animation: LottieAnimationCommon): void {\n    this._animationsMap.set(animation.id, animation);\n  }\n\n  public removeAnimation(animationId: string): void {\n    this._animationsMap.delete(animationId);\n  }\n\n  private _requireValidId(id: string | undefined): asserts id is string {\n    if (typeof id !== 'string' || !id) throw createError('Invalid theme id');\n  }\n\n  private _requireValidUrl(url: string | undefined): asserts url is string {\n    if (!url || !isValidURL(url)) throw createError('Invalid theme url');\n  }\n\n  private _requireValidData(data: string | undefined): asserts data is string {\n    // eslint-disable-next-line no-warning-comments\n    // TODO: validate lottie style sheets using lottie-styler\n    if (typeof data !== 'string' || !data) throw createError('Invalid theme data');\n  }\n\n  private async _loadDataFromUrl(url: string): Promise<void> {\n    try {\n      const response = await fetch(url);\n\n      const data = await response.text();\n\n      this._data = data;\n    } catch (error) {\n      throw createError(`Failed to fetch theme from url, Error: ${JSON.stringify(error)}`);\n    }\n  }\n}\n","/**\n * Copyright 2023 Design Barn Inc.\n */\n\nimport type { Animation as AnimationType } from '@lottiefiles/lottie-types';\nimport type { ZipOptions } from 'fflate';\n\nimport pkg from '../../package.json';\n\nimport type { DotLottiePlugin } from './dotlottie-plugin';\nimport type { DotLottieStateMachineCommonOptions } from './dotlottie-state-machine-common';\nimport { DotLottieStateMachineCommon } from './dotlottie-state-machine-common';\nimport type { ThemeOptions } from './dotlottie-theme-common';\nimport { LottieThemeCommon } from './dotlottie-theme-common';\nimport type { AnimationOptions, LottieAnimationCommon } from './lottie-animation-common';\nimport type { LottieAudioCommon } from './lottie-audio-common';\nimport type { LottieImageCommon } from './lottie-image-common';\nimport type { Manifest } from './manifest';\nimport { DotLottieError, createError, isAudioAsset, isImageAsset, isValidURL } from './utils';\n\nexport interface DotLottieOptions {\n  author?: string;\n  customData?: Record<string, string>;\n  description?: string;\n  enableDuplicateImageOptimization?: boolean;\n  generator?: string;\n  keywords?: string;\n  plugins?: DotLottiePlugin[];\n  revision?: number;\n  version?: string;\n}\n\nexport interface GetAnimationOptions {\n  inlineAssets?: boolean;\n}\n\nexport interface ConversionOptions {\n  zipOptions?: ZipOptions;\n}\n\nexport class DotLottieCommon {\n  protected readonly _animationsMap: Map<string, LottieAnimationCommon> = new Map();\n\n  protected readonly _plugins: DotLottiePlugin[] = [];\n\n  protected readonly _themesMap: Map<string, LottieThemeCommon> = new Map();\n\n  protected readonly _stateMachinesMap: Map<string, DotLottieStateMachineCommon> = new Map();\n\n  protected _author?: string;\n\n  protected _description?: string;\n\n  protected _generator?: string;\n\n  protected _keywords?: string;\n\n  protected _version?: string;\n\n  protected _revision?: number;\n\n  // Custom data for the dotLottie\n  protected _customData?: Record<string, unknown>;\n\n  public enableDuplicateImageOptimization?: boolean;\n\n  public constructor(options?: DotLottieOptions) {\n    this._author = options?.author ?? 'LottieFiles';\n\n    this._description = options?.description ?? '';\n\n    this._generator = options?.generator ?? `${pkg.name}@${pkg.version}`;\n\n    this._keywords = options?.keywords ?? 'dotLottie';\n\n    this._version = options?.version ?? '1.0';\n\n    this._customData = options?.customData ?? {};\n\n    this._revision = options?.revision ?? 1;\n\n    this.enableDuplicateImageOptimization = options?.enableDuplicateImageOptimization ?? false;\n  }\n\n  public async toBase64(_options: ConversionOptions | undefined = undefined): Promise<string> {\n    throw createError('toBase64() method not implemented in concrete class!');\n  }\n\n  public create(_options?: DotLottieOptions): DotLottieCommon {\n    throw createError('create() method not implemented in concrete class!');\n  }\n\n  public async download(_fileName: string, _options: ConversionOptions | undefined = undefined): Promise<void> {\n    throw createError('download(fileName:string) method not implemented in concrete class!');\n  }\n\n  public addPlugins(..._plugins: DotLottiePlugin[]): DotLottieCommon {\n    throw createError('addPlugins(...plugins: DotLottiePlugin[]) not implemented in concrete class!');\n  }\n\n  public addAnimation(_animationOptions: AnimationOptions): DotLottieCommon {\n    throw createError('addAnimation(animationOptions: AnimationOptions) not implemented in concrete class!');\n  }\n\n  public async fromArrayBuffer(_arrayBuffer: ArrayBuffer): Promise<DotLottieCommon> {\n    throw createError(\n      'fromArrayBuffer(arrayBuffer: ArrayBuffer): Promise<DotLottieCommon> not implemented in concrete class!',\n    );\n  }\n\n  public async toArrayBuffer(_options: ConversionOptions | undefined = undefined): Promise<ArrayBuffer> {\n    throw createError('toArrayBuffer(): Promise<ArrayBuffer> is not implemented in concrete class!');\n  }\n\n  public get plugins(): DotLottiePlugin[] {\n    return this._plugins;\n  }\n\n  public get version(): string | undefined {\n    return this._version;\n  }\n\n  public get revision(): number | undefined {\n    return this._revision;\n  }\n\n  public get author(): string | undefined {\n    return this._author;\n  }\n\n  public get description(): string | undefined {\n    return this._description;\n  }\n\n  public get keywords(): string | undefined {\n    return this._keywords;\n  }\n\n  public get generator(): string | undefined {\n    return this._generator;\n  }\n\n  public get animations(): LottieAnimationCommon[] {\n    return Array.from(this._animationsMap.values());\n  }\n\n  public get manifest(): Manifest {\n    return this._buildManifest();\n  }\n\n  public get custom(): Record<string, unknown> | undefined {\n    return this._customData;\n  }\n\n  public get themes(): LottieThemeCommon[] {\n    return Array.from(this._themesMap.values());\n  }\n\n  public get stateMachines(): DotLottieStateMachineCommon[] {\n    return Array.from(this._stateMachinesMap.values());\n  }\n\n  public setCustomData(customData: Record<string, unknown> | undefined): DotLottieCommon {\n    this._customData = customData ?? {};\n\n    return this;\n  }\n\n  public setAuthor(author: string | undefined): DotLottieCommon {\n    this._author = author ?? 'LottieFiles';\n\n    return this;\n  }\n\n  public setDescription(description: string | undefined): DotLottieCommon {\n    this._description = description ?? '';\n\n    return this;\n  }\n\n  public setGenerator(generator: string | undefined): DotLottieCommon {\n    this._generator = generator ?? `${pkg.name}@${pkg.version}`;\n\n    return this;\n  }\n\n  public setKeywords(keywords: string | undefined): DotLottieCommon {\n    this._keywords = keywords ?? 'dotLottie';\n\n    return this;\n  }\n\n  public setVersion(version: string | undefined): DotLottieCommon {\n    this._version = version ?? '1.0';\n\n    return this;\n  }\n\n  public setRevision(revision: number): DotLottieCommon {\n    this._revision = revision;\n\n    return this;\n  }\n\n  public removePlugins(...plugins: DotLottiePlugin[]): DotLottieCommon {\n    plugins.forEach((plugin) => {\n      plugin.uninstall();\n\n      const pluginIndex = this._plugins.indexOf(plugin);\n\n      if (pluginIndex !== -1) {\n        this._plugins.splice(pluginIndex, 1);\n      }\n    });\n\n    return this;\n  }\n\n  /**\n   * Renames the underlying LottieImage, as well as updating the image asset path inside the animation data.\n   * @param newName - desired id and fileName,\n   * @param imageId - The id of the LottieImage to rename\n   */\n  private _renameImage(animation: LottieAnimationCommon, newName: string, imageId: string): void {\n    animation.imageAssets.forEach((imageAsset) => {\n      if (imageAsset.id === imageId) {\n        // Rename the LottieImage\n        imageAsset.renameImage(newName);\n\n        if (!animation.data) throw createError('No animation data available.');\n\n        const animationAssets = animation.data.assets as AnimationType['assets'];\n\n        if (!animationAssets) throw createError('No image assets to rename.');\n\n        // Find the image asset inside the animation data and rename its path\n        for (const asset of animationAssets) {\n          if ('w' in asset && 'h' in asset) {\n            if (asset.id === imageId) {\n              asset.p = imageAsset.fileName;\n            }\n          }\n        }\n      }\n    });\n  }\n\n  private _renameImageAssets(): void {\n    const images: Map<string, LottieImageCommon[]> = new Map();\n\n    this.animations.forEach((animation) => {\n      images.set(animation.id, animation.imageAssets);\n    });\n\n    let size = 0;\n\n    images.forEach((value) => {\n      size += value.length;\n    });\n\n    for (let i = this.animations.length - 1; i >= 0; i -= 1) {\n      const animation = this.animations.at(i);\n\n      if (animation) {\n        for (let j = animation.imageAssets.length - 1; j >= 0; j -= 1) {\n          const image = animation.imageAssets.at(j);\n\n          if (image) {\n            this._renameImage(animation, `image_${size}`, image.id);\n            size -= 1;\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Renames the underlying LottieAudio, as well as updating the audio asset path inside the animation data.\n   * @param newName - desired id and fileName,\n   * @param audioId - The id of the LottieAudio to rename\n   */\n  private _renameAudio(animation: LottieAnimationCommon, newName: string, audioId: string): void {\n    animation.audioAssets.forEach((audioAsset) => {\n      if (audioAsset.id === audioId) {\n        // Rename the LottieImage\n        audioAsset.renameAudio(newName);\n\n        if (!animation.data) throw new DotLottieError('No animation data available.');\n\n        const animationAssets = animation.data.assets as AnimationType['assets'];\n\n        if (!animationAssets) throw new DotLottieError('No audio assets to rename.');\n\n        // Find the audio asset inside the animation data and rename its path\n        for (const asset of animationAssets) {\n          if (isAudioAsset(asset)) {\n            if (asset.id === audioId) {\n              asset.p = audioAsset.fileName;\n            }\n          }\n        }\n      }\n    });\n  }\n\n  private _renameAudioAssets(): void {\n    const audio: Map<string, LottieAudioCommon[]> = new Map();\n\n    this.animations.forEach((animation) => {\n      audio.set(animation.id, animation.audioAssets);\n    });\n\n    let size = 0;\n\n    audio.forEach((value) => {\n      size += value.length;\n    });\n\n    for (let i = this.animations.length - 1; i >= 0; i -= 1) {\n      const animation = this.animations.at(i);\n\n      if (animation) {\n        for (let j = animation.audioAssets.length - 1; j >= 0; j -= 1) {\n          const audioAsset = animation.audioAssets.at(j);\n\n          if (audioAsset) {\n            this._renameAudio(animation, `audio_${size}`, audioAsset.id);\n            size -= 1;\n          }\n        }\n      }\n    }\n  }\n\n  protected _addLottieAnimation(animation: LottieAnimationCommon): DotLottieCommon {\n    if (this._animationsMap.get(animation.id)) {\n      throw createError('Duplicate animation id detected, aborting.');\n    }\n\n    this._animationsMap.set(animation.id, animation);\n\n    return this;\n  }\n\n  /**\n   * Inlines all assets of the passed animation\n   * @param animation - Animation whose asset are to be inlined\n   * @returns LottieAnimationCommon with inlined assets\n   */\n  private async _findAssetsAndInline(animation: LottieAnimationCommon): Promise<LottieAnimationCommon> {\n    const animationAssets = animation.data?.assets as AnimationType['assets'];\n\n    if (!animationAssets) throw new DotLottieError(\"Failed to inline assets, the animation's assets are undefined.\");\n\n    const images = this.getImages();\n    const audios = this.getAudio();\n\n    for (const asset of animationAssets) {\n      if (isImageAsset(asset)) {\n        for (const image of images) {\n          if (image.fileName === asset.p) {\n            // encoded is true\n            asset.e = 1;\n            asset.u = '';\n            asset.p = await image.toDataURL();\n          }\n        }\n      } else if (isAudioAsset(asset)) {\n        for (const audio of audios) {\n          if (audio.fileName === asset.p) {\n            // encoded is true\n            asset.e = 1;\n            asset.u = '';\n            asset.p = await audio.toDataURL();\n          }\n        }\n      }\n    }\n\n    return animation;\n  }\n\n  /**\n   * Returns the desired animation\n   * @param animationId - desired animation id\n   * @param inlineAssets - if true will inline the assets inside the data of the LottieAnimation\n   * @returns\n   */\n  public async getAnimation(\n    animationId: string,\n    options: GetAnimationOptions = {},\n  ): Promise<LottieAnimationCommon | undefined> {\n    if (!options.inlineAssets) return this._animationsMap.get(animationId);\n\n    let dataWithInlinedImages = this._animationsMap.get(animationId);\n\n    if (!dataWithInlinedImages) throw new DotLottieError('Failed to find animation.');\n\n    dataWithInlinedImages = await this._findAssetsAndInline(dataWithInlinedImages);\n\n    return dataWithInlinedImages;\n  }\n\n  public getAnimations(): Array<[string, LottieAnimationCommon]> | undefined {\n    return Array.from(this._animationsMap);\n  }\n\n  public removeAnimation(animationId: string): DotLottieCommon {\n    const targetAnimation = this._animationsMap.get(animationId);\n\n    if (targetAnimation) {\n      const assignedThemes = targetAnimation.themes;\n\n      for (const assignedTheme of assignedThemes) {\n        this.unassignTheme({\n          animationId: targetAnimation.id,\n          themeId: assignedTheme.id,\n        });\n      }\n\n      this._animationsMap.delete(targetAnimation.id);\n    }\n\n    return this;\n  }\n\n  public getImages(): LottieImageCommon[] {\n    const images: LottieImageCommon[] = [];\n\n    this.animations.map((animation) => {\n      return images.push(...animation.imageAssets);\n    });\n\n    return images;\n  }\n\n  public getAudio(): LottieAudioCommon[] {\n    const audio: LottieAudioCommon[] = [];\n\n    this.animations.map((animation) => {\n      return audio.push(...animation.audioAssets);\n    });\n\n    return audio;\n  }\n\n  public getTheme(themeId: string): LottieThemeCommon | undefined {\n    return this._themesMap.get(themeId);\n  }\n\n  protected _buildManifest(): Manifest {\n    const animationsList = Array.from(this._animationsMap.values());\n    const themesList = Array.from(this._themesMap.values());\n    const stateMachinesList = Array.from(this._stateMachinesMap.keys());\n    const activeAnimationId = animationsList.find((value) => value.defaultActiveAnimation)?.id ?? '';\n\n    const manifest: Manifest = {\n      version: this.version,\n      revision: this.revision,\n      keywords: this.keywords,\n      author: this.author,\n      generator: this.generator,\n      animations: animationsList.map((animation) => ({\n        id: animation.id,\n        direction: animation.direction,\n        speed: animation.speed,\n        playMode: animation.playMode,\n        loop: animation.loop,\n        autoplay: animation.autoplay,\n        hover: animation.hover,\n        intermission: animation.intermission,\n        ...(animation.defaultTheme ? { defaultTheme: animation.defaultTheme } : {}),\n      })),\n      ...(this.description && this.description.trim() !== '' ? { description: this.description } : {}),\n      ...(activeAnimationId && activeAnimationId.trim() !== '' ? { activeAnimationId } : {}),\n      ...(this._customData && Object.keys(this._customData).length !== 0 ? { custom: this._customData } : {}),\n    };\n\n    if (themesList.length > 0) {\n      manifest.themes = themesList.map((theme) => ({\n        id: theme.id,\n        animations: theme.animations.map((animation) => animation.id),\n      }));\n    }\n\n    if (stateMachinesList.length > 0) {\n      manifest.states = stateMachinesList;\n    }\n\n    return manifest;\n  }\n\n  /**\n   * Constructs the manifest and calls toJSON on the animations\n   * so the data is fetched for every animation.\n   *\n   * @returns DotLottie context\n   */\n  public async build(): Promise<DotLottieCommon> {\n    this._buildManifest();\n\n    for (const animation of this.animations) {\n      await animation.toJSON();\n    }\n\n    for (const theme of this.themes) {\n      await theme.toString();\n    }\n\n    if (this.animations.length > 1) {\n      // Rename assets incrementally if there are multiple animations\n      this._renameImageAssets();\n      this._renameAudioAssets();\n    }\n\n    const parallelPlugins = [];\n    const sequentialPlugins = [];\n\n    for (const plugin of this.plugins) {\n      if (plugin.parallel) {\n        parallelPlugins.push(plugin);\n      } else {\n        sequentialPlugins.push(plugin);\n      }\n    }\n\n    // Run parallel plugins\n    await Promise.all(parallelPlugins.map(async (plugin) => plugin.onBuild()));\n\n    // Run sequential plugins\n    for (const plugin of sequentialPlugins) {\n      await plugin.onBuild();\n    }\n\n    return this;\n  }\n\n  public async toBlob(options: ConversionOptions | undefined = undefined): Promise<Blob> {\n    const arrayBuffer = await this.toArrayBuffer(options);\n\n    return new Blob([arrayBuffer], { type: 'application/zip' });\n  }\n\n  /**\n   * Creates a DotLottie instance from a url to a dotlottie file\n   * @param url - url to the dotlottie file\n   * @returns DotLottie instance\n   */\n  public async fromURL(url: string): Promise<DotLottieCommon> {\n    if (!isValidURL(url)) throw createError('Invalid URL');\n\n    try {\n      const response = await fetch(url);\n\n      if (!response.ok) {\n        throw createError(response.statusText);\n      }\n\n      const arrayBuffer = await response.arrayBuffer();\n\n      return this.fromArrayBuffer(arrayBuffer);\n    } catch (err) {\n      if (err instanceof Error) {\n        throw createError(err.message);\n      }\n    }\n\n    throw createError('Unknown error');\n  }\n\n  public merge(...dotlotties: DotLottieCommon[]): DotLottieCommon {\n    const mergedDotlottie = this.create();\n\n    for (const dotlottie of dotlotties) {\n      dotlottie.animations.forEach((animation) => {\n        if (animation.data) {\n          mergedDotlottie.addAnimation({\n            id: animation.id,\n            data: animation.data,\n          });\n        } else if (animation.url) {\n          mergedDotlottie.addAnimation({\n            id: animation.id,\n            url: animation.url,\n          });\n        }\n      });\n\n      dotlottie.themes.forEach((theme) => {\n        if (theme.data) {\n          mergedDotlottie.addTheme({\n            id: theme.id,\n            data: theme.data,\n          });\n        } else if (theme.url) {\n          mergedDotlottie.addTheme({\n            id: theme.id,\n            url: theme.url,\n          });\n        }\n\n        theme.animations.forEach((animation) => {\n          mergedDotlottie.assignTheme({\n            animationId: animation.id,\n            themeId: theme.id,\n          });\n        });\n      });\n\n      dotlottie.stateMachines.forEach((stateMachine) => {\n        const stateOption = {\n          states: stateMachine.states,\n          descriptor: { id: stateMachine.id, initial: stateMachine.initial },\n          zipOptions: stateMachine.zipOptions,\n        };\n\n        mergedDotlottie.addStateMachine(stateOption);\n      });\n    }\n\n    return mergedDotlottie;\n  }\n\n  public addTheme(themeOptions: ThemeOptions): DotLottieCommon {\n    const theme = new LottieThemeCommon(themeOptions);\n\n    this._themesMap.set(theme.id, theme);\n\n    return this;\n  }\n\n  public removeTheme(id: string): DotLottieCommon {\n    const targetTheme = this._themesMap.get(id);\n\n    if (targetTheme) {\n      const scopedAnimations = targetTheme.animations;\n\n      for (const scopedAnimation of scopedAnimations) {\n        this.unassignTheme({\n          animationId: scopedAnimation.id,\n          themeId: id,\n        });\n      }\n\n      this._themesMap.delete(targetTheme.id);\n    }\n\n    return this;\n  }\n\n  public assignTheme({ animationId, themeId }: { animationId: string; themeId: string }): DotLottieCommon {\n    const theme = this._themesMap.get(themeId);\n\n    if (!theme) throw createError(`Failed to find theme with id ${themeId}`);\n\n    const animation = this._animationsMap.get(animationId);\n\n    if (!animation) throw createError(`Failed to find animation with id ${animationId}`);\n\n    theme.addAnimation(animation);\n\n    animation.addTheme(theme);\n\n    return this;\n  }\n\n  public unassignTheme({ animationId, themeId }: { animationId: string; themeId: string }): DotLottieCommon {\n    const theme = this._themesMap.get(themeId);\n\n    if (!theme) throw createError(`Failed to find theme with id ${themeId}`);\n\n    const animation = this._animationsMap.get(animationId);\n\n    if (!animation) throw createError(`Failed to find animation with id ${animationId}`);\n\n    theme.removeAnimation(animation.id);\n\n    animation.removeTheme(theme.id);\n\n    return this;\n  }\n\n  public addStateMachine(stateMachineOptions: DotLottieStateMachineCommonOptions): DotLottieCommon {\n    const newState = new DotLottieStateMachineCommon(stateMachineOptions);\n\n    this._stateMachinesMap.set(stateMachineOptions.descriptor.id, newState);\n\n    return this;\n  }\n\n  public getStateMachine(stateId: string): DotLottieStateMachineCommon | undefined {\n    return this._stateMachinesMap.get(stateId);\n  }\n\n  public removeStateMachine(stateMachineId: string): DotLottieCommon {\n    this._stateMachinesMap.delete(stateMachineId);\n\n    return this;\n  }\n\n  protected _requireValidAuthor(author: string | undefined): asserts author is string {\n    if (!author) throw createError('Invalid author');\n  }\n\n  protected _requireValidDescription(description: string | undefined): asserts description is string {\n    if (!description) throw createError('Invalid description');\n  }\n\n  protected _requireValidGenerator(generator: string | undefined): asserts generator is string {\n    if (!generator) throw createError('Invalid generator');\n  }\n\n  protected _requireValidKeywords(keywords: string | undefined): asserts keywords is string {\n    if (!keywords) throw createError('Invalid keywords');\n  }\n\n  protected _requireValidVersion(version: string | undefined): asserts version is string {\n    if (!version) throw createError('Invalid version');\n  }\n\n  protected _requireValidCustomData(\n    customData: Record<string, unknown> | undefined,\n  ): asserts customData is Record<string, unknown> {\n    if (!customData) throw createError('Invalid customData');\n  }\n}\n","/**\n * Copyright 2023 Design Barn Inc.\n */\n\nimport type { Animation as AnimationType } from '@lottiefiles/lottie-types';\nimport type { ZipOptions } from 'fflate';\n\nimport type { LottieThemeCommon } from './dotlottie-theme-common';\nimport type { LottieAudioCommon } from './lottie-audio-common';\nimport type { LottieImageCommon } from './lottie-image-common';\nimport type { ManifestAnimation } from './manifest';\nimport { PlayMode } from './manifest';\nimport { DotLottieError, createError, isAudioAsset } from './utils';\n\nexport type AnimationData = AnimationType;\n\nexport interface ExportOptions {\n  inlineAssets?: boolean;\n}\n\nexport interface AnimationOptions extends ManifestAnimation {\n  data?: AnimationData;\n  defaultActiveAnimation?: boolean;\n  url?: string;\n  zipOptions?: ZipOptions;\n}\n\nexport class LottieAnimationCommon {\n  protected _data?: AnimationData;\n\n  protected _id: string = '';\n\n  protected _url?: string;\n\n  private _direction: ManifestAnimation['direction'];\n\n  private _speed: number;\n\n  private _playMode: PlayMode;\n\n  private _loop: boolean | number;\n\n  private _autoplay: boolean;\n\n  private _hover: boolean;\n\n  private _intermission: number;\n\n  private _zipOptions: ZipOptions;\n\n  // Will be translated to 'activeAnimationId' inside of the manifest file\n  // This indicates if the player should play this animation by default rather than the first in the list.\n  protected _defaultActiveAnimation: boolean;\n\n  protected _imageAssets: LottieImageCommon[] = [];\n\n  protected _audioAssets: LottieAudioCommon[] = [];\n\n  protected _themesMap: Map<string, LottieThemeCommon> = new Map();\n\n  protected _defaultTheme?: string;\n\n  public constructor(options: AnimationOptions) {\n    this._requireValidOptions(options);\n\n    this._id = options.id;\n\n    this._zipOptions = options.zipOptions ?? {};\n\n    if (options.data) this._data = options.data;\n    if (options.url) this._url = options.url;\n\n    this._direction = options.direction ?? 1;\n    this._speed = options.speed ?? 1.0;\n    this._playMode = options.playMode ?? PlayMode.Normal;\n    this._loop = options.loop ?? false;\n    this._autoplay = options.autoplay ?? false;\n    this._defaultActiveAnimation = options.defaultActiveAnimation ?? false;\n    this._hover = options.hover ?? false;\n    this._intermission = options.intermission ?? 0;\n  }\n\n  public async toBase64(): Promise<string> {\n    throw createError('lottie animation controls tobase64 not implemented!');\n  }\n\n  public get zipOptions(): ZipOptions {\n    return this._zipOptions;\n  }\n\n  public set zipOptions(zipOptions: ZipOptions) {\n    this._zipOptions = zipOptions;\n  }\n\n  public get id(): string {\n    return this._id;\n  }\n\n  public set id(id: string) {\n    this._requireValidId(id);\n\n    this._id = id;\n  }\n\n  public get defaultTheme(): string | undefined {\n    return this._defaultTheme;\n  }\n\n  public set defaultTheme(defaultTheme: string | undefined) {\n    if (defaultTheme) {\n      this._defaultTheme = defaultTheme;\n    }\n  }\n\n  public get themes(): LottieThemeCommon[] {\n    return Array.from(this._themesMap.values());\n  }\n\n  public set themes(themes: LottieThemeCommon[]) {\n    this._themesMap = new Map();\n    themes.forEach((theme) => {\n      this._themesMap.set(theme.id, theme);\n    });\n  }\n\n  public get imageAssets(): LottieImageCommon[] {\n    return this._imageAssets;\n  }\n\n  public set imageAssets(imageAssets: LottieImageCommon[]) {\n    this._imageAssets = imageAssets;\n  }\n\n  public get audioAssets(): LottieAudioCommon[] {\n    return this._audioAssets;\n  }\n\n  public set audioAssets(audioAssets: LottieAudioCommon[]) {\n    this._audioAssets = audioAssets;\n  }\n\n  public get data(): AnimationData | undefined {\n    return this._data;\n  }\n\n  public set data(data: AnimationData | undefined) {\n    this._requireValidLottieData(data);\n\n    this._data = data;\n  }\n\n  public get url(): string | undefined {\n    return this._url;\n  }\n\n  public set url(url: string | undefined) {\n    this._requireValidUrl(url);\n\n    this._url = url;\n  }\n\n  public get direction(): ManifestAnimation['direction'] {\n    return this._direction;\n  }\n\n  public set direction(direction: ManifestAnimation['direction']) {\n    this._direction = direction;\n  }\n\n  public get speed(): number {\n    return this._speed;\n  }\n\n  public set speed(speed: number) {\n    this._speed = speed;\n  }\n\n  public get playMode(): PlayMode {\n    return this._playMode;\n  }\n\n  public set playMode(playMode: PlayMode) {\n    this._playMode = playMode;\n  }\n\n  public get loop(): boolean | number {\n    return this._loop;\n  }\n\n  public set loop(loop: boolean | number) {\n    this._requireValidLoop(loop);\n    this._loop = loop;\n  }\n\n  public get autoplay(): boolean {\n    return this._autoplay;\n  }\n\n  public set autoplay(autoplay: boolean) {\n    this._autoplay = autoplay;\n  }\n\n  public get defaultActiveAnimation(): boolean {\n    return this._defaultActiveAnimation;\n  }\n\n  public set defaultActiveAnimation(defaultActiveAnimation: boolean) {\n    this._defaultActiveAnimation = defaultActiveAnimation;\n  }\n\n  public get hover(): boolean {\n    return this._hover;\n  }\n\n  public set hover(hover: boolean) {\n    this._hover = hover;\n  }\n\n  public get intermission(): number {\n    return this._intermission;\n  }\n\n  public set intermission(intermission: number) {\n    this._requireValidIntermission(intermission);\n    this._intermission = intermission;\n  }\n\n  public addTheme(theme: LottieThemeCommon): void {\n    this._themesMap.set(theme.id, theme);\n  }\n\n  public removeTheme(themeId: string): void {\n    this._themesMap.delete(themeId);\n  }\n\n  /**\n   * Return the animation data as an array buffer.\n   * @returns data - The animation data as an ArrayBuffer.\n   * @throws Error - if the animation data is not set and the url is not provided.\n   * @throws Error - if the animation data is not a valid Lottie animation data object.\n   * @throws Error - if the fetch request fails.\n   */\n  public async toArrayBuffer(options: ExportOptions = {}): Promise<ArrayBuffer> {\n    const dataJson = await this.toJSON(options);\n\n    return new TextEncoder().encode(JSON.stringify(dataJson)).buffer;\n  }\n\n  protected async _extractImageAssets(): Promise<boolean> {\n    throw new DotLottieError('_extractImageAssets(): Promise<boolean> method not implemented in concrete class');\n  }\n\n  protected async _extractAudioAssets(): Promise<boolean> {\n    throw new DotLottieError('_extractAudioAssets(): Promise<boolean> method not implemented in concrete class');\n  }\n\n  /**\n   * Return the animation data as a blob.\n   * @returns blob - The animation data as a Blob.\n   * @throws Error - if the animation data is not set and the url is not provided.\n   * @throws Error - if the animation data is not a valid Lottie animation data object.\n   * @throws Error - if the fetch request fails.\n   */\n  public async toBlob(options: ExportOptions = {}): Promise<Blob> {\n    const dataJson = await this.toJSON(options);\n\n    return new Blob([JSON.stringify(dataJson)], { type: 'application/json' });\n  }\n\n  /**\n   * Return the animation data as a JSON object.\n   * If the animation data is not already set, it will be fetched from the provided url.\n   * @returns data - The animation data.\n   * @throws Error - if the animation data is not a valid Lottie animation data object.\n   * @throws Error - if the fetch request fails.\n   */\n  public async toJSON(options: ExportOptions = {}): Promise<AnimationType> {\n    if (this._url && !this._data) {\n      this._data = await this._fromUrl(this._url);\n    }\n\n    this._requireValidLottieData(this._data);\n\n    if (this._data.assets?.length) {\n      // Even if the user wants to inline the assets, we still need to extract them\n      await this._extractImageAssets();\n      await this._extractAudioAssets();\n\n      if (options.inlineAssets) {\n        const animationAssets = this.data?.assets as AnimationType['assets'];\n\n        if (!animationAssets)\n          throw new DotLottieError(\"Failed to inline assets, the animation's assets are undefined.\");\n\n        const images = this.imageAssets;\n        const audios = this.audioAssets;\n\n        for (const asset of animationAssets) {\n          if ('w' in asset && 'h' in asset && !('xt' in asset) && 'p' in asset) {\n            for (const image of images) {\n              if (image.fileName === asset.p) {\n                // encoded is true\n                asset.e = 1;\n                asset.u = '';\n                asset.p = await image.toDataURL();\n              }\n            }\n          } else if (isAudioAsset(asset)) {\n            // Audio asset\n            for (const audio of audios) {\n              if (audio.fileName === asset.p) {\n                // encoded is true\n                asset.e = 1;\n                asset.u = '';\n                asset.p = await audio.toDataURL();\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return this._data;\n  }\n\n  /**\n   * Fetch the animation data from the provided url.\n   * @param url - The url to fetch the animation data from.\n   * @returns animationData - The animation data.\n   * @throws Error - if the fetch request fails.\n   * @throws Error - if the data object is not a valid Lottie animation data object.\n   */\n  private async _fromUrl(url: string): Promise<AnimationType> {\n    const response = await fetch(url);\n\n    const text = await response.text();\n\n    let json;\n\n    try {\n      json = JSON.parse(text);\n    } catch (error) {\n      if (error instanceof Error) {\n        throw createError(`${error.message}: Invalid json returned from url`);\n      }\n    }\n\n    this._requireValidLottieData(json as AnimationData);\n\n    return json;\n  }\n\n  /**\n   * Ensure that the provided url is a valid string.\n   * The url must be a non-empty string, otherwise an error will be thrown.\n   * @param url - The url to validate.\n   * @throws Error - if the url is not a valid string.\n   *\n   */\n  private _requireValidUrl(url: string | undefined): asserts url is string {\n    try {\n      // eslint-disable-next-line no-new\n      new URL(url || '');\n    } catch (_err) {\n      throw createError('Invalid animation url');\n    }\n  }\n\n  /**\n   * Ensure that the provided data object is a valid Lottie animation data object.\n   * The data object must contain the following mandatory properties: v, ip, op, layers, fr, w, h.\n   * If the data object does not contain all mandatory properties, an error will be thrown.\n   * @param data - The data object to validate.\n   * @throws Error - if the data object is not a valid Lottie animation data object.\n   */\n  private _requireValidLottieData(data: AnimationData | undefined): asserts data is AnimationData {\n    const mandatoryLottieProperties = ['v', 'ip', 'op', 'layers', 'fr', 'w', 'h'];\n\n    const hasAllMandatoryProperties = mandatoryLottieProperties.every((field) =>\n      Object.prototype.hasOwnProperty.call(data, field),\n    );\n\n    if (!hasAllMandatoryProperties) {\n      throw createError('Received invalid Lottie data.');\n    }\n  }\n\n  /**\n   * Ensure that the provided id is a valid string.\n   * The id must be a non-empty string, otherwise an error will be thrown.\n   * @param id - The id to validate.\n   * @throws Error - if the id is not a valid string.\n   */\n  private _requireValidId(id: string | undefined): asserts id is string {\n    if (!id) throw createError('Invalid animation id');\n  }\n\n  /**\n   * Ensure that the provided url is a valid string.\n   * The url must be a non-empty string, otherwise an error will be thrown.\n   * @param url - The url to validate.\n   * @throws Error - if the url is not a valid string.\n   *\n   */\n  private _requireValidDirection(direction: number): asserts direction is number {\n    if (direction !== -1 && direction !== 1) {\n      throw createError('Direction can only be -1 (backwards) or 1 (forwards)');\n    }\n  }\n\n  /**\n   * Ensure that the provided intermission is a valid, positive number.\n   * @param intermission - The intermission to validate.\n   * @throws Error - if the intermission is not a valid number.\n   */\n  private _requireValidIntermission(intermission: number): asserts intermission is number {\n    if (intermission < 0 || !Number.isInteger(intermission)) {\n      throw createError('intermission must be a positive number');\n    }\n  }\n\n  /**\n   * Ensure that the provided loop is a valid, positive number or boolean.\n   * @param loop - The loop to validate.\n   * @throws Error - if the loop is not a valid number or boolean.\n   */\n  private _requireValidLoop(loop: number | boolean): asserts loop is number | boolean {\n    if (typeof loop === 'number' && (!Number.isInteger(loop) || loop < 0)) {\n      throw createError('loop must be a positive number or boolean');\n    }\n  }\n\n  /**\n   * Ensure that the provided options object is a valid AnimationOptions object.\n   * The options object must contain the following mandatory properties: id, data or url.\n   * If the options object does not contain all mandatory properties, an error will be thrown.\n   * @param options - The options object to validate.\n   * @throws Error - if the options object is not a valid AnimationOptions object.\n   * @throws Error - if the id is not a valid string.\n   * @throws Error - if the data object is not a valid Lottie animation data object.\n   * @throws Error - if the url is not a valid url string.\n   * @throws Error - if the data object is not set and the url is not provided.\n   */\n  private _requireValidOptions(options: AnimationOptions): asserts options is AnimationOptions {\n    this._requireValidId(options.id);\n\n    if (!options.data && !options.url) {\n      throw createError('No data or url provided.');\n    }\n\n    if (options.data) {\n      this._requireValidLottieData(options.data);\n    }\n\n    if (options.url) {\n      this._requireValidUrl(options.url);\n    }\n\n    if (options.direction) {\n      this._requireValidDirection(options.direction);\n    }\n\n    if (options.intermission) {\n      this._requireValidIntermission(options.intermission);\n    }\n\n    if (options.loop) {\n      this._requireValidLoop(options.loop);\n    }\n  }\n}\n","/**\n * Copyright 2023 Design Barn Inc.\n */\n\nimport type { ZipOptions } from 'fflate';\n\nimport type { LottieAnimationCommon } from './lottie-animation-common';\nimport { dataUrlFromU8, createError } from './utils';\n\nexport type ImageData = string | ArrayBuffer | Blob;\n\nexport interface ImageOptions {\n  data?: ImageData;\n  fileName: string;\n  id: string;\n  parentAnimations?: LottieAnimationCommon[];\n  url?: string;\n  zipOptions?: ZipOptions;\n}\n\nexport class LottieImageCommon {\n  protected _data?: ImageData;\n\n  protected _id: string = '';\n\n  protected _url?: string;\n\n  protected _fileName: string = '';\n\n  protected _parentAnimations: LottieAnimationCommon[];\n\n  protected _zipOptions: ZipOptions;\n\n  public constructor(options: ImageOptions) {\n    this._requireValidId(options.id);\n    this._requireValidFileName(options.fileName);\n\n    this._zipOptions = options.zipOptions ?? {};\n\n    if (options.data) {\n      this._data = options.data;\n    }\n\n    if (options.id) {\n      this._id = options.id;\n    }\n\n    if (options.url) {\n      this._url = options.url;\n    }\n\n    if (options.fileName) {\n      this._fileName = options.fileName;\n    }\n\n    this._parentAnimations = options.parentAnimations || [];\n  }\n\n  public get zipOptions(): ZipOptions {\n    return this._zipOptions;\n  }\n\n  public set zipOptions(zipOptions: ZipOptions) {\n    this._zipOptions = zipOptions;\n  }\n\n  /**\n   * Ensure that the provided id is a valid string.\n   * The id must be a non-empty string, otherwise an error will be thrown.\n   * @param id - The id to validate.\n   * @throws Error - if the id is not a valid string.\n   */\n  private _requireValidId(id: string | undefined): asserts id is string {\n    if (!id) throw createError('Invalid image id');\n  }\n\n  /**\n   * Ensure that the provided fileName is a valid string.\n   * The fileName must be a non-empty string, otherwise an error will be thrown.\n   * @param fileName - The fileName to validate.\n   * @throws Error - if the fileName is not a valid string.\n   */\n  private _requireValidFileName(fileName: string | undefined): asserts fileName is string {\n    if (!fileName) throw createError('Invalid image fileName');\n  }\n\n  public get fileName(): string {\n    return this._fileName;\n  }\n\n  public set fileName(fileName: string) {\n    if (!fileName) throw createError('Invalid image file name');\n    this._fileName = fileName;\n  }\n\n  public get id(): string {\n    return this._id;\n  }\n\n  public set id(id: string) {\n    if (!id) throw createError('Invalid image id');\n    this._id = id;\n  }\n\n  public get data(): ImageData | undefined {\n    return this._data;\n  }\n\n  public set data(data: ImageData | undefined) {\n    if (!data) {\n      throw createError('Invalid data');\n    }\n\n    this._data = data;\n  }\n\n  public get url(): string | undefined {\n    return this._url;\n  }\n\n  public set url(url: string | undefined) {\n    if (!url) {\n      throw new Error('Invalid url');\n    }\n\n    this._url = url;\n  }\n\n  public get parentAnimations(): LottieAnimationCommon[] {\n    return this._parentAnimations;\n  }\n\n  public set parentAnimations(parentAnimations: LottieAnimationCommon[]) {\n    this._parentAnimations = parentAnimations;\n  }\n\n  public async toDataURL(): Promise<string> {\n    if (this._data && this._isDataURL(this._data)) return this.data as string;\n\n    const arrayBuffer = await this.toArrayBuffer();\n\n    return dataUrlFromU8(new Uint8Array(arrayBuffer));\n  }\n\n  /**\n   * Renames the id and fileName to newName.\n   * @param newName - A new id and filename for the image.\n   */\n  public renameImage(newName: string): void {\n    this.id = newName;\n\n    if (this.fileName) {\n      let fileExt = this.fileName.split('.').pop();\n\n      if (!fileExt) {\n        fileExt = '.png';\n      }\n      // Default to png if the file extension isn't available\n      this.fileName = `${newName}.${fileExt}`;\n    }\n  }\n\n  public async toArrayBuffer(): Promise<ArrayBuffer> {\n    const blob = await (await this.toBlob()).arrayBuffer();\n\n    return blob;\n  }\n\n  public async toBlob(): Promise<Blob> {\n    if (!this._data && this._url) {\n      this._data = await this._fromUrlToBlob(this._url);\n    }\n\n    if (!this._data) {\n      throw new Error('Invalid data');\n    }\n\n    if (this._isDataURL(this._data)) {\n      const data = this._data as string;\n\n      const [header, base64] = data.split(',');\n\n      // If the data doesnt contain the encoding URL, return it\n      if ((!header || !base64) && data.length) {\n        return new Blob([data]);\n      }\n\n      if (!header || !base64) {\n        throw new Error('Invalid data');\n      }\n\n      // eslint-disable-next-line require-unicode-regexp\n      const type = header.replace('data:', '').replace(/;base64$/, '');\n\n      return new Blob([base64], { type });\n    }\n\n    if (this._isArrayBuffer(this._data)) {\n      return new Blob([this._data]);\n    }\n\n    if (this._isBlob(this._data)) {\n      return this._data as Blob;\n    }\n\n    throw new Error('Invalid data');\n  }\n\n  protected async _fromUrlToBlob(url: string): Promise<Blob> {\n    const response = await fetch(url);\n\n    return response.blob();\n  }\n\n  protected _isArrayBuffer(data: ImageData): boolean {\n    return data instanceof ArrayBuffer;\n  }\n\n  protected _isDataURL(data: ImageData): boolean {\n    return typeof data === 'string' && data.startsWith('data:');\n  }\n\n  protected _isBlob(data: ImageData): boolean {\n    return data instanceof Blob;\n  }\n}\n","/**\n * Copyright 2023 Design Barn Inc.\n */\n\nimport type { DotLottieCommon } from './dotlottie-common';\nimport { createError } from './utils';\n\ninterface DotLottiePluginOptions {\n  parallel?: boolean;\n}\n\nexport class DotLottiePlugin {\n  protected dotlottie: DotLottieCommon | undefined;\n\n  protected _parallel: boolean = false;\n\n  public constructor(options?: DotLottiePluginOptions) {\n    this.dotlottie = undefined;\n\n    if (options?.parallel) {\n      this._parallel = options.parallel;\n    }\n  }\n\n  public install(dotlottie: DotLottieCommon): void {\n    this.dotlottie = dotlottie;\n  }\n\n  public uninstall(): void {\n    this.dotlottie = undefined;\n  }\n\n  public get parallel(): boolean {\n    return this._parallel;\n  }\n\n  public set parallel(value: boolean) {\n    this._parallel = value;\n  }\n\n  public async onBuild(): Promise<void> {\n    throw createError('dotlottie-plugin build Not implemented!');\n  }\n\n  protected _requireDotLottie(dotLottie: DotLottieCommon | undefined): asserts dotLottie {\n    if (!dotLottie) throw createError('dotLottie context is null inside of duplicate image detector plugin.');\n  }\n}\n","/**\n * Copyright 2023 Design Barn Inc.\n */\n\nimport type { ImageOptions } from './common';\nimport { LottieImageCommon } from './common';\n\nexport class LottieImage extends LottieImageCommon {\n  public constructor(options: ImageOptions) {\n    super(options);\n  }\n}\n","/**\n * Copyright 2023 Design Barn Inc.\n */\n\nimport type { Animation as AnimationType } from '@lottiefiles/lottie-types';\n\nimport { LottieImage } from '../lottie-image';\n\nimport { DotLottiePlugin } from './dotlottie-plugin';\nimport type { LottieAnimationCommon } from './lottie-animation-common';\nimport type { LottieImageCommon } from './lottie-image-common';\nimport { createError } from './utils';\n\ninterface LottieImageCompare {\n  excludeFromExport: boolean;\n  hash: string | undefined;\n  image: LottieImageCommon;\n}\n\nexport class DuplicateImageDetectorCommon extends DotLottiePlugin {\n  public async generatePhash(_image: LottieImageCommon): Promise<string> {\n    createError('generatePhash(image: LottieImageCommon): Promise<Hash> is not implemented in concrete class.');\n\n    return '';\n  }\n\n  public distanceTo(_imageHash: string, _targetImageHash: string): number {\n    createError(\n      'distanceTo(_imageHash: string, _targetImageHash: string): Promise<number> is not implemented in concrete class.',\n    );\n\n    return 0;\n  }\n\n  private async _createRecordOfDuplicates(): Promise<Record<string, LottieImageCommon[]>> {\n    this._requireDotLottie(this.dotlottie);\n\n    const images: LottieImageCompare[] = [];\n    const recordOfDuplicates: Record<string, LottieImageCommon[]> = {};\n\n    // push all of the animation image assets in to the images array\n    for (const animation of this.dotlottie.animations) {\n      for (const image of animation.imageAssets) {\n        images.push({\n          excludeFromExport: false,\n          image,\n          hash: await this.generatePhash(image),\n        });\n      }\n    }\n\n    // For every array of images\n    // Loop over the images of the array\n    for (const image of images) {\n      // Now that we have a single image of the image array, compare it to every other image in the arry\n      for (const compareImage of images) {\n        if (\n          image.image.id !== compareImage.image.id &&\n          !image.excludeFromExport &&\n          !compareImage.excludeFromExport &&\n          image.hash &&\n          compareImage.hash &&\n          this.distanceTo(image.hash, compareImage.hash) < 5\n          // image.hash.getHammingDistance(compareImage.hash) < 5\n        ) {\n          // Check if key is already in use\n          if (!recordOfDuplicates[image.image.fileName] && !recordOfDuplicates[compareImage.image.fileName]) {\n            compareImage.excludeFromExport = true;\n\n            recordOfDuplicates[image.image.fileName] = [compareImage.image];\n          } else if (recordOfDuplicates[compareImage.image.fileName]) {\n            // Check for duplicates, otherwise push the duplicate image\n            if (!recordOfDuplicates[compareImage.image.fileName]?.find((item) => item.id === image.image.id)) {\n              image.excludeFromExport = true;\n              recordOfDuplicates[compareImage.image.fileName]?.push(image.image);\n            }\n          }\n        }\n      }\n    }\n\n    return recordOfDuplicates;\n  }\n\n  /**\n   * Apply the image path to all duplicate images.\n   *\n   * @param recordOfDuplicates - A record of duplicate images, the key being a fileName,\n   * the value being the identical LottieImageCommon object.\n   */\n  public adjustDuplicateImageAssetPath(\n    animation: LottieAnimationCommon,\n    recordOfDuplicates: Record<string, LottieImageCommon[]>,\n  ): void {\n    for (const key in recordOfDuplicates) {\n      if (key) {\n        recordOfDuplicates[key]?.forEach((item) => {\n          // Check if this animation has the image before loop over data to save time ?\n\n          if (animation.data) {\n            const animationAssets = animation.data.assets as AnimationType['assets'];\n\n            if (animationAssets) {\n              animationAssets.forEach((asset) => {\n                if ('w' in asset && 'h' in asset) {\n                  // we've found an asset id thats equal to the id of a duplicate image\n                  // Or we found the fileName of a duplicate inside the asset, so we need to change it\n\n                  if (asset.p === item.fileName) {\n                    const fileName = key;\n\n                    asset.p = fileName;\n                  }\n                }\n              });\n            }\n          }\n        });\n      }\n    }\n  }\n\n  public override async onBuild(): Promise<void> {\n    this._requireDotLottie(this.dotlottie);\n\n    // Create a record of duplicates\n    const recordOfDuplicates: Record<string, LottieImageCommon[]> = await this._createRecordOfDuplicates();\n\n    // Check the record of duplicates and repath the duplicate images\n    this.dotlottie.animations.forEach((animation) => {\n      this.adjustDuplicateImageAssetPath(animation, recordOfDuplicates);\n    });\n\n    // Create an array of duplicates by looping over the recordOfDuplicates and using the key as the image to use\n    const clonedImages: Record<string, LottieImage> = {};\n    const images = this.dotlottie.getImages();\n\n    for (const key in recordOfDuplicates) {\n      if (key) {\n        for (const image of images) {\n          if (image.fileName === key && image.data !== undefined) {\n            clonedImages[key] = new LottieImage({\n              data: image.data,\n              id: image.id,\n              fileName: image.fileName,\n            });\n          }\n        }\n      }\n    }\n\n    if (Object.keys(clonedImages).length !== Object.keys(recordOfDuplicates).length)\n      createError('The number of cloned images does not match the number of duplicate keys.');\n\n    // For each image of recordOfDuplicates, remove itself from all the parent animations and push the clone\n    for (const key in recordOfDuplicates) {\n      if (key) {\n        recordOfDuplicates[key]?.forEach((image) => {\n          if (image.parentAnimations.length) {\n            for (const parentAnimation of image.parentAnimations) {\n              parentAnimation.imageAssets.splice(parentAnimation.imageAssets.indexOf(image), 1);\n\n              const clonedImage = clonedImages[key];\n\n              if (clonedImage !== undefined) {\n                parentAnimation.imageAssets.push(clonedImage);\n\n                clonedImage.parentAnimations.push(parentAnimation);\n              }\n            }\n          }\n        });\n      }\n    }\n  }\n}\n","/**\n * Copyright 2023 Design Barn Inc.\n */\n\nimport type { ZipOptions } from 'fflate';\n\nimport type { LottieAnimationCommon } from './lottie-animation-common';\nimport { dataUrlFromU8, DotLottieError, ErrorCodes } from './utils';\n\nexport type AudioData = string | ArrayBuffer | Blob;\n\nexport interface AudioOptions {\n  data?: AudioData;\n  fileName: string;\n  id: string;\n  parentAnimations?: LottieAnimationCommon[];\n  url?: string;\n  zipOptions?: ZipOptions;\n}\n\nexport class LottieAudioCommon {\n  protected _data?: AudioData;\n\n  protected _id: string = '';\n\n  protected _url?: string;\n\n  protected _fileName: string = '';\n\n  protected _parentAnimations: LottieAnimationCommon[];\n\n  protected _zipOptions: ZipOptions;\n\n  public constructor(options: AudioOptions) {\n    this._requireValidId(options.id);\n    this._requireValidFileName(options.fileName);\n\n    this._zipOptions = options.zipOptions ?? {};\n\n    if (options.data) {\n      this._data = options.data;\n    }\n\n    if (options.id) {\n      this._id = options.id;\n    }\n\n    if (options.url) {\n      this._url = options.url;\n    }\n\n    if (options.fileName) {\n      this._fileName = options.fileName;\n    }\n\n    this._parentAnimations = options.parentAnimations || [];\n  }\n\n  public get zipOptions(): ZipOptions {\n    return this._zipOptions;\n  }\n\n  public set zipOptions(zipOptions: ZipOptions) {\n    this._zipOptions = zipOptions;\n  }\n\n  public get fileName(): string {\n    return this._fileName;\n  }\n\n  public set fileName(fileName: string) {\n    if (!fileName) throw new DotLottieError('Invalid audio file name', ErrorCodes.ASSET_NOT_FOUND);\n    this._fileName = fileName;\n  }\n\n  public get id(): string {\n    return this._id;\n  }\n\n  public set id(id: string) {\n    if (!id) throw new DotLottieError('Invalid audio id', ErrorCodes.ASSET_NOT_FOUND);\n    this._id = id;\n  }\n\n  public get data(): AudioData | undefined {\n    return this._data;\n  }\n\n  public set data(data: AudioData | undefined) {\n    if (!data) {\n      throw new DotLottieError('Invalid data');\n    }\n\n    this._data = data;\n  }\n\n  public get parentAnimations(): LottieAnimationCommon[] {\n    return this._parentAnimations;\n  }\n\n  public set parentAnimations(parentAnimations: LottieAnimationCommon[]) {\n    this._parentAnimations = parentAnimations;\n  }\n\n  public async toDataURL(): Promise<string> {\n    if (this._data && this._isDataURL(this._data)) return this.data as string;\n\n    const arrayBuffer = await this.toArrayBuffer();\n\n    return dataUrlFromU8(new Uint8Array(arrayBuffer));\n  }\n\n  /**\n   * Renames the id and fileName to newName.\n   * @param newName - A new id and filename for the audio.\n   */\n  public renameAudio(newName: string): void {\n    this.id = newName;\n\n    if (this.fileName) {\n      let fileExt = this.fileName.split('.').pop();\n\n      if (!fileExt) {\n        fileExt = '.png';\n      }\n      // Default to png if the file extension isn't available\n      this.fileName = `${newName}.${fileExt}`;\n    }\n  }\n\n  public async toArrayBuffer(): Promise<ArrayBuffer> {\n    const blob = await (await this.toBlob()).arrayBuffer();\n\n    return blob;\n  }\n\n  public async toBlob(): Promise<Blob> {\n    if (!this._data && this._url) {\n      this._data = await this._fromUrlToBlob(this._url);\n    }\n\n    if (!this._data) {\n      throw new Error('Invalid data');\n    }\n\n    if (this._isDataURL(this._data)) {\n      const data = this._data as string;\n\n      const [header, base64] = data.split(',');\n\n      // If the data doesnt contain the encoding URL, return it\n      if ((!header || !base64) && data.length) {\n        return new Blob([data]);\n      }\n\n      if (!header || !base64) {\n        throw new Error('Invalid data');\n      }\n\n      // eslint-disable-next-line require-unicode-regexp\n      const type = header.replace('data:', '').replace(/;base64$/, '');\n\n      return new Blob([base64], { type });\n    }\n\n    if (this._isArrayBuffer(this._data)) {\n      return new Blob([this._data]);\n    }\n\n    if (this._isBlob(this._data)) {\n      return this._data as Blob;\n    }\n\n    throw new Error('Invalid data');\n  }\n\n  protected async _fromUrlToBlob(url: string): Promise<Blob> {\n    const response = await fetch(url);\n\n    return response.blob();\n  }\n\n  protected _isArrayBuffer(data: AudioData): boolean {\n    return data instanceof ArrayBuffer;\n  }\n\n  protected _isDataURL(data: AudioData): boolean {\n    return typeof data === 'string' && data.startsWith('data:');\n  }\n\n  protected _isBlob(data: AudioData): boolean {\n    return data instanceof Blob;\n  }\n\n  /**\n   * Ensure that the provided id is a valid string.\n   * The id must be a non-empty string, otherwise an error will be thrown.\n   * @param id - The id to validate.\n   * @throws Error - if the id is not a valid string.\n   */\n  private _requireValidId(id: string | undefined): asserts id is string {\n    if (!id) throw new DotLottieError('Invalid audio id');\n  }\n\n  /**\n   * Ensure that the provided fileName is a valid string.\n   * The fileName must be a non-empty string, otherwise an error will be thrown.\n   * @param fileName - The fileName to validate.\n   * @throws Error - if the fileName is not a valid string.\n   */\n  private _requireValidFileName(fileName: string | undefined): asserts fileName is string {\n    if (!fileName) throw new DotLottieError('Invalid audio fileName');\n  }\n}\n","var __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spreadArray = (this && this.__spreadArray) || function (to, from) {\n    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)\n        to[j] = from[i];\n    return to;\n};\nvar VanilaConverter = /** @class */ (function () {\n    function VanilaConverter(document, glayScaleCalculator, resizer) {\n        this.document = document;\n        this.glayScaleCalculator = glayScaleCalculator;\n        this.resizer = resizer;\n    }\n    VanilaConverter.prototype.createCanvasRenderingContext2D = function (width, height) {\n        var canvas = this.document.createElement('canvas');\n        canvas.width = width;\n        canvas.height = height;\n        canvas.setAttribute('style', 'image-rendering: -webkit-optimize-contrast; image-rendering: crisp-edges;');\n        var ctx = canvas.getContext('2d');\n        if (ctx === null) {\n            throw new ReferenceError('undefined CanvasRenderingContext2D');\n        }\n        ctx.mozImageSmoothingEnabled = true;\n        ctx.webkitImageSmoothingEnabled = true;\n        ctx.msImageSmoothingEnabled = true;\n        ctx.imageSmoothingEnabled = true;\n        return ctx;\n    };\n    VanilaConverter.prototype.convert = function (source) {\n        var _this = this;\n        var img = new Image();\n        var result = (new Promise(function (resolve) {\n            img.onload = function () {\n                var ctx = _this.createCanvasRenderingContext2D(img.width, img.height);\n                ctx.drawImage(img, 0, 0, img.width, img.height);\n                var colorMap = ctx.getImageData(0, 0, img.width, img.height).data;\n                resolve(colorMap);\n            };\n        }))\n            .then(function (colorMap) {\n            return _this.resizer.resize(colorMap, img.width, img.height, source.width, source.height);\n        }).then(function (resizedColorMap) {\n            var glayArraySouce = __spreadArray([], __read(Array(resizedColorMap.length / 4).keys())).map(function (i) {\n                var index = i * 4;\n                var _a = __read([\n                    resizedColorMap[index],\n                    resizedColorMap[index + 1],\n                    resizedColorMap[index + 2]\n                ], 3), r = _a[0], g = _a[1], b = _a[2];\n                return _this.glayScaleCalculator(r, g, b);\n            });\n            return new Uint8ClampedArray(glayArraySouce);\n        });\n        img.src = source.url.toString();\n        return result;\n    };\n    return VanilaConverter;\n}());\nexport default VanilaConverter;\n","var HashSource = /** @class */ (function () {\n    function HashSource(url, hashSize) {\n        if (hashSize === void 0) { hashSize = 8; }\n        this.url = url;\n        this.hashSize = hashSize;\n        this.width = hashSize + 1;\n        this.height = hashSize;\n    }\n    HashSource.prototype.calculateArea = function () {\n        return this.width * this.height;\n    };\n    return HashSource;\n}());\nexport default HashSource;\n","import { lanczos } from '@rgba-image/lanczos';\nvar LanczosResizer = /** @class */ (function () {\n    function LanczosResizer() {\n    }\n    LanczosResizer.prototype.resize = function (source, nativeWidth, nativeHeight, expectedWidth, expectedHeight) {\n        var sourceImageData = (new ImageDataSouce(nativeWidth, nativeHeight, source));\n        var destImageData = (new ImageDataSouce(expectedWidth, expectedHeight, new Uint8ClampedArray(expectedWidth * expectedHeight * 4)));\n        lanczos(sourceImageData, destImageData);\n        return destImageData.data;\n    };\n    return LanczosResizer;\n}());\nexport default LanczosResizer;\nvar ImageDataSouce = /** @class */ (function () {\n    function ImageDataSouce(width, height, source) {\n        this.width = width;\n        this.height = height;\n        this.data = source;\n    }\n    return ImageDataSouce;\n}());\n","var __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spreadArray = (this && this.__spreadArray) || function (to, from) {\n    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)\n        to[j] = from[i];\n    return to;\n};\nvar Hash = /** @class */ (function () {\n    function Hash(rawHash) {\n        if (rawHash.split('').find(function (row) { return (row !== '1' && row !== '0'); })) {\n            throw new TypeError('Not bits.');\n        }\n        this.rawHash = rawHash;\n    }\n    Hash.prototype.getHammingDistance = function (hash) {\n        if (this.rawHash.length !== hash.rawHash.length) {\n            throw new TypeError('Not equal to hash length.');\n        }\n        var target = hash.rawHash.split('');\n        var diff = this.rawHash.split('').filter(function (row, index) { return row !== (target[index] || '0'); });\n        return diff.length;\n    };\n    Hash.prototype.toString = function () {\n        return this.calcuateHexadecimal(this.rawHash.split('').map(function (row) { return (row === '1') ? 1 : 0; }));\n    };\n    Hash.prototype.arrayChunk = function (array, chunk) {\n        return __spreadArray([], __read(Array(Math.ceil(array.length / chunk)).keys())).map(function (index) { return array.slice(index * chunk, (index * chunk) + chunk); });\n    };\n    Hash.prototype.calcuateHexadecimal = function (binalyNumbers) {\n        return this.arrayChunk(binalyNumbers, 4)\n            .map(function (row) { return parseInt(row.join(''), 2).toString(16); }).join('');\n    };\n    return Hash;\n}());\nexport default Hash;\n","var __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spreadArray = (this && this.__spreadArray) || function (to, from) {\n    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)\n        to[j] = from[i];\n    return to;\n};\nimport Hash from \"./Hash\";\nvar HashGenerator = /** @class */ (function () {\n    function HashGenerator(document) {\n        this.document = document;\n    }\n    HashGenerator.prototype.generateByImage = function (source, glayImage) {\n        glayImage.width = source.width;\n        glayImage.height = source.height;\n        var canvas = this.document.createElement('canvas');\n        var context = canvas.getContext('2d');\n        if (context === null) {\n            throw new ReferenceError('undefined CanvasRenderingContext2D');\n        }\n        context.drawImage(glayImage, 0, 0, source.width, source.height);\n        return this.generate(source, context);\n    };\n    HashGenerator.prototype.generateByCanvasRenderingContext2D = function (source, glayImageDrawingCanvasContext) {\n        var imageData = glayImageDrawingCanvasContext.getImageData(0, 0, source.width, source.height).data;\n        var glayArray = new Uint8ClampedArray(__spreadArray([], __read(Array(imageData.length / 4).keys())).map(function (i) {\n            var index = i * 4;\n            return imageData[index];\n        }));\n        return this.generate(source, glayArray);\n    };\n    HashGenerator.prototype.generateByUint8ClampedArray = function (source, glayArray) {\n        if (glayArray.length !== source.calculateArea()) {\n            throw new Error(\"Not convertable grayArray, convertable grayArray length is \" + source.calculateArea());\n        }\n        var binaryNumbers = Array.from(glayArray)\n            .map(function (row, index, colors) { return ((row <= colors[index + 1]) ? 1 : 0); })\n            .filter(function (_, index) { return (index + 1) % source.width !== 0; }).join('');\n        return new Hash(binaryNumbers);\n    };\n    HashGenerator.prototype.generate = function (source, glayImageSource) {\n        if (glayImageSource instanceof HTMLImageElement) {\n            return this.generateByImage(source, glayImageSource);\n        }\n        else if (glayImageSource instanceof CanvasRenderingContext2D) {\n            return this.generateByCanvasRenderingContext2D(source, glayImageSource);\n        }\n        else if (glayImageSource instanceof Uint8ClampedArray) {\n            return this.generateByUint8ClampedArray(source, glayImageSource);\n        }\n        throw new TypeError('Not generatable glay image source.');\n    };\n    return HashGenerator;\n}());\nexport default HashGenerator;\n","export default function ITU_R601_2Method(r, g, b) {\n    return Math.round((r * 299 / 1000 + g * 587 / 1000 + b * 114 / 1000));\n}\n;\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nimport VanilaConverter from \"./HashableImageSourceConverter/DifferenceHash/VanilaConverter\";\nimport HashSource from \"./HashSource\";\nimport LanczosResizer from \"./HashableImageSourceConverter/Resizer/LanczosResizer\";\nimport HashGenerator from \"./HashGenerator\";\nimport ITU_R601_2Method from \"./HashableImageSourceConverter/GlayScaleCalculator/ITU_R601_2Method\";\nvar DifferenceHashBuilder = /** @class */ (function () {\n    function DifferenceHashBuilder(dHashConverter, document) {\n        if (dHashConverter === void 0) { dHashConverter = null; }\n        if (document === void 0) { document = window.document; }\n        if (dHashConverter === null) {\n            dHashConverter = new VanilaConverter(document, ITU_R601_2Method, new LanczosResizer());\n        }\n        this.dHashConverter = dHashConverter;\n        this.generator = new HashGenerator(document);\n    }\n    DifferenceHashBuilder.prototype.build = function (url, hashSize) {\n        if (hashSize === void 0) { hashSize = 8; }\n        return __awaiter(this, void 0, void 0, function () {\n            var source, hashableImageSouce;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        source = new HashSource(url, hashSize);\n                        return [4 /*yield*/, this.dHashConverter.convert(source)];\n                    case 1:\n                        hashableImageSouce = _a.sent();\n                        return [2 /*return*/, this.generator.generate(source, hashableImageSouce)];\n                }\n            });\n        });\n    };\n    return DifferenceHashBuilder;\n}());\nexport default DifferenceHashBuilder;\n","/**\n * Copyright 2023 Design Barn Inc.\n */\n\nimport { Hash, DifferenceHashBuilder } from 'browser-image-hash';\n\nimport { DuplicateImageDetectorCommon } from './common';\nimport type { LottieImageCommon } from './common';\n\nexport class DuplicateImageDetector extends DuplicateImageDetectorCommon {\n  public override async generatePhash(image: LottieImageCommon): Promise<string> {\n    const builder = new DifferenceHashBuilder();\n    const targetURL = new URL(await image.toDataURL());\n\n    const destHash = await builder.build(targetURL);\n\n    return destHash.rawHash;\n  }\n\n  public override distanceTo(imageHash: string, targetImageHash: string): number {\n    const srcHash = new Hash(imageHash);\n    const targetHash = new Hash(targetImageHash);\n\n    return srcHash.getHammingDistance(targetHash);\n  }\n}\n","/**\n * Copyright 2023 Design Barn Inc.\n */\n\nimport type { AudioOptions } from '../common';\nimport { LottieAudioCommon } from '../common';\n\nexport class LottieAudio extends LottieAudioCommon {\n  public constructor(options: AudioOptions) {\n    super(options);\n  }\n}\n","/**\n * Copyright 2023 Design Barn Inc.\n */\n\nimport type { Animation as AnimationType } from '@lottiefiles/lottie-types';\n\nimport type { AnimationOptions } from './common';\nimport { DotLottieError, LottieAnimationCommon, createError, getExtensionTypeFromBase64, isAudioAsset } from './common';\nimport { LottieImage } from './lottie-image';\nimport { LottieAudio } from './node/lottie-audio';\n\nexport class LottieAnimation extends LottieAnimationCommon {\n  public constructor(options: AnimationOptions) {\n    super(options);\n  }\n\n  /**\n   * Return the animation data as a base 64 encoded string.\n   *\n   * @returns data - The animation data as a base64 encoded string.\n   * @throws Error - if the animation data is not set and the url is not provided.\n   * @throws Error - if the animation data is not a valid Lottie animation data object.\n   * @throws Error - if the fetch request fails.\n   */\n  public override async toBase64(): Promise<string> {\n    const data = await this.toArrayBuffer();\n\n    if (typeof window === 'undefined') return Buffer.from(data).toString('base64');\n\n    const uint8Array = new Uint8Array(data);\n    const binaryString = uint8Array.reduce((acc, val) => acc + String.fromCharCode(val), '');\n\n    return window.btoa(binaryString);\n  }\n\n  /**\n   * Extract image assets from the anima tion.\n   *\n   * @returns boolean - true on error otherwise false on success\n   */\n  protected override async _extractImageAssets(): Promise<boolean> {\n    if (!this._data) throw createError('Asset extraction failed.');\n\n    const animationAssets = this._data.assets as AnimationType['assets'];\n\n    if (!animationAssets) throw createError('Asset extraction failed.');\n\n    for (const asset of animationAssets) {\n      if ('w' in asset && 'h' in asset && !('xt' in asset) && 'p' in asset) {\n        const imageData = asset.p.split(',');\n\n        // Image data is invalid\n        if (!imageData.length || !imageData[0] || !imageData[1]) {\n          break;\n        }\n\n        let extType = null;\n        const fileType = getExtensionTypeFromBase64(asset.p);\n\n        extType = fileType;\n\n        const fileName = `${asset.id}.${extType}`;\n\n        this._imageAssets.push(\n          new LottieImage({\n            data: asset.p,\n            id: asset.id,\n            fileName,\n            parentAnimations: [this],\n          }),\n        );\n\n        asset.p = fileName;\n        asset.u = '/images/';\n        asset.e = 0;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   *\n   * Extract audio assets from the animation.\n   *\n   * @returns boolean - true on error otherwise false on success\n   */\n  protected override async _extractAudioAssets(): Promise<boolean> {\n    if (!this._data) throw new DotLottieError('Asset extraction failed.');\n\n    const animationAssets = this._data.assets as AnimationType['assets'];\n\n    if (!animationAssets) throw new DotLottieError('Asset extraction failed.');\n\n    for (const asset of animationAssets) {\n      if (isAudioAsset(asset)) {\n        const audioData = asset.p.split(',');\n\n        // Image data is invalid\n        if (!audioData.length || !audioData[0] || !audioData[1]) {\n          break;\n        }\n\n        let extType = null;\n        const fileType = getExtensionTypeFromBase64(asset.p);\n\n        extType = fileType;\n\n        const fileName = `${asset.id}.${extType}`;\n\n        this._audioAssets.push(\n          new LottieAudio({\n            data: asset.p,\n            id: asset.id,\n            fileName,\n            parentAnimations: [this],\n          }),\n        );\n\n        asset.p = fileName;\n        asset.u = '/audio/';\n        asset.e = 0;\n      }\n    }\n\n    return false;\n  }\n}\n"]}