var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
var Hash = /** @class */ (function () {
    function Hash(rawHash) {
        if (rawHash.split('').find(function (row) { return (row !== '1' && row !== '0'); })) {
            throw new TypeError('Not bits.');
        }
        this.rawHash = rawHash;
    }
    Hash.prototype.getHammingDistance = function (hash) {
        if (this.rawHash.length !== hash.rawHash.length) {
            throw new TypeError('Not equal to hash length.');
        }
        var target = hash.rawHash.split('');
        var diff = this.rawHash.split('').filter(function (row, index) { return row !== (target[index] || '0'); });
        return diff.length;
    };
    Hash.prototype.toString = function () {
        return this.calcuateHexadecimal(this.rawHash.split('').map(function (row) { return (row === '1') ? 1 : 0; }));
    };
    Hash.prototype.arrayChunk = function (array, chunk) {
        return __spreadArray([], __read(Array(Math.ceil(array.length / chunk)).keys())).map(function (index) { return array.slice(index * chunk, (index * chunk) + chunk); });
    };
    Hash.prototype.calcuateHexadecimal = function (binalyNumbers) {
        return this.arrayChunk(binalyNumbers, 4)
            .map(function (row) { return parseInt(row.join(''), 2).toString(16); }).join('');
    };
    return Hash;
}());
export default Hash;
