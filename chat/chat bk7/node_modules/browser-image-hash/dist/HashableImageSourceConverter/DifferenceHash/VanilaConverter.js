var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
var VanilaConverter = /** @class */ (function () {
    function VanilaConverter(document, glayScaleCalculator, resizer) {
        this.document = document;
        this.glayScaleCalculator = glayScaleCalculator;
        this.resizer = resizer;
    }
    VanilaConverter.prototype.createCanvasRenderingContext2D = function (width, height) {
        var canvas = this.document.createElement('canvas');
        canvas.width = width;
        canvas.height = height;
        canvas.setAttribute('style', 'image-rendering: -webkit-optimize-contrast; image-rendering: crisp-edges;');
        var ctx = canvas.getContext('2d');
        if (ctx === null) {
            throw new ReferenceError('undefined CanvasRenderingContext2D');
        }
        ctx.mozImageSmoothingEnabled = true;
        ctx.webkitImageSmoothingEnabled = true;
        ctx.msImageSmoothingEnabled = true;
        ctx.imageSmoothingEnabled = true;
        return ctx;
    };
    VanilaConverter.prototype.convert = function (source) {
        var _this = this;
        var img = new Image();
        var result = (new Promise(function (resolve) {
            img.onload = function () {
                var ctx = _this.createCanvasRenderingContext2D(img.width, img.height);
                ctx.drawImage(img, 0, 0, img.width, img.height);
                var colorMap = ctx.getImageData(0, 0, img.width, img.height).data;
                resolve(colorMap);
            };
        }))
            .then(function (colorMap) {
            return _this.resizer.resize(colorMap, img.width, img.height, source.width, source.height);
        }).then(function (resizedColorMap) {
            var glayArraySouce = __spreadArray([], __read(Array(resizedColorMap.length / 4).keys())).map(function (i) {
                var index = i * 4;
                var _a = __read([
                    resizedColorMap[index],
                    resizedColorMap[index + 1],
                    resizedColorMap[index + 2]
                ], 3), r = _a[0], g = _a[1], b = _a[2];
                return _this.glayScaleCalculator(r, g, b);
            });
            return new Uint8ClampedArray(glayArraySouce);
        });
        img.src = source.url.toString();
        return result;
    };
    return VanilaConverter;
}());
export default VanilaConverter;
