var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { call } from 'wasm-imagemagick';
var ImageMagickConverter = /** @class */ (function () {
    function ImageMagickConverter(document) {
        this.document = document;
    }
    ImageMagickConverter.prototype.extractExtension = function (url) {
        if (url.protocol === 'data:') {
            var mimeType = url.pathname.split(';').shift() || '';
            switch (mimeType.toLowerCase()) {
                case 'image/png':
                    return 'png';
                case 'image/gif':
                    return 'gif';
                case 'image/jpeg':
                    return 'jpeg';
                default:
                    throw new TypeError('Not supported mimetype.');
            }
        }
        var fileName = decodeURIComponent(url.pathname.split('/').pop() || '');
        return fileName.substring(fileName.lastIndexOf('.') + 1, fileName.length);
    };
    ImageMagickConverter.prototype.createImageFileSource = function (url) {
        return __awaiter(this, void 0, void 0, function () {
            var extension, fileName, fetchedSourceImage, content, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        extension = this.extractExtension(url);
                        fileName = "source." + extension;
                        return [4 /*yield*/, fetch(url.toString())];
                    case 1:
                        fetchedSourceImage = _b.sent();
                        _a = Uint8Array.bind;
                        return [4 /*yield*/, fetchedSourceImage.arrayBuffer()];
                    case 2:
                        content = new (_a.apply(Uint8Array, [void 0, _b.sent()]))();
                        return [2 /*return*/, { name: fileName, content: content }];
                }
            });
        });
    };
    ImageMagickConverter.prototype.convertImage = function (source) {
        return __awaiter(this, void 0, void 0, function () {
            var imageFileSource, command;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.createImageFileSource(source.url)];
                    case 1:
                        imageFileSource = _a.sent();
                        command = [
                            'convert',
                            imageFileSource.name,
                            '-filter', 'Lanczos', '-resize',
                            source.width + "x" + source.height + "!",
                            '-colorspace', 'Gray', '-define', 'png:color-type=0',
                            'output.png'
                        ];
                        return [2 /*return*/, call([imageFileSource], command)];
                }
            });
        });
    };
    ImageMagickConverter.prototype.convert = function (source) {
        var _this = this;
        return new Promise(function (resolve, reject) { return __awaiter(_this, void 0, void 0, function () {
            var convertResult, img;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.convertImage(source)];
                    case 1:
                        convertResult = _a.sent();
                        if (convertResult.exitCode !== 0) {
                            reject('There was an error: ' + convertResult.stderr.join('\n'));
                        }
                        img = this.document.createElement('img');
                        img.onload = function () {
                            URL.revokeObjectURL(img.src);
                            resolve(img);
                        };
                        img.onerror = reject;
                        img.src = URL.createObjectURL(new Blob([convertResult.outputFiles[0].buffer || new ArrayBuffer(0)]));
                        return [2 /*return*/];
                }
            });
        }); });
    };
    return ImageMagickConverter;
}());
export default ImageMagickConverter;
