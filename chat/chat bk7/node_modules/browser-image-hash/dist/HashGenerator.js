var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
import Hash from "./Hash";
var HashGenerator = /** @class */ (function () {
    function HashGenerator(document) {
        this.document = document;
    }
    HashGenerator.prototype.generateByImage = function (source, glayImage) {
        glayImage.width = source.width;
        glayImage.height = source.height;
        var canvas = this.document.createElement('canvas');
        var context = canvas.getContext('2d');
        if (context === null) {
            throw new ReferenceError('undefined CanvasRenderingContext2D');
        }
        context.drawImage(glayImage, 0, 0, source.width, source.height);
        return this.generate(source, context);
    };
    HashGenerator.prototype.generateByCanvasRenderingContext2D = function (source, glayImageDrawingCanvasContext) {
        var imageData = glayImageDrawingCanvasContext.getImageData(0, 0, source.width, source.height).data;
        var glayArray = new Uint8ClampedArray(__spreadArray([], __read(Array(imageData.length / 4).keys())).map(function (i) {
            var index = i * 4;
            return imageData[index];
        }));
        return this.generate(source, glayArray);
    };
    HashGenerator.prototype.generateByUint8ClampedArray = function (source, glayArray) {
        if (glayArray.length !== source.calculateArea()) {
            throw new Error("Not convertable grayArray, convertable grayArray length is " + source.calculateArea());
        }
        var binaryNumbers = Array.from(glayArray)
            .map(function (row, index, colors) { return ((row <= colors[index + 1]) ? 1 : 0); })
            .filter(function (_, index) { return (index + 1) % source.width !== 0; }).join('');
        return new Hash(binaryNumbers);
    };
    HashGenerator.prototype.generate = function (source, glayImageSource) {
        if (glayImageSource instanceof HTMLImageElement) {
            return this.generateByImage(source, glayImageSource);
        }
        else if (glayImageSource instanceof CanvasRenderingContext2D) {
            return this.generateByCanvasRenderingContext2D(source, glayImageSource);
        }
        else if (glayImageSource instanceof Uint8ClampedArray) {
            return this.generateByUint8ClampedArray(source, glayImageSource);
        }
        throw new TypeError('Not generatable glay image source.');
    };
    return HashGenerator;
}());
export default HashGenerator;
